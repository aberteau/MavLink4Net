//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.42000
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;


namespace MavLink4Net.Messages
{
    
    
    public enum MavMessageType : byte
    {
        
        /// <summary>
        /// The heartbeat message shows that a system is present and responding. The type of the MAV and Autopilot hardware allow the receiving system to treat further messages from this system appropriate (e.g. by laying out the user interface based on the autopilot).
        /// </summary>
        /// <remarks>
        /// HEARTBEAT
        /// </remarks>
        [Description(@"The heartbeat message shows that a system is present and responding. The type of the MAV and Autopilot hardware allow the receiving system to treat further messages from this system appropriate (e.g. by laying out the user interface based on the autopilot).")]
        Heartbeat = 0,
        
        /// <summary>
        /// The general system state. If the system is following the MAVLink standard, the system state is mainly defined by three orthogonal states/modes: The system mode, which is either LOCKED (motors shut down and locked), MANUAL (system under RC control), GUIDED (system with autonomous position control, position setpoint controlled manually) or AUTO (system guided by path/waypoint planner). The NAV_MODE defined the current flight state: LIFTOFF (often an open-loop maneuver), LANDING, WAYPOINTS or VECTOR. This represents the internal navigation state machine. The system status shows whether the system is currently active or not and if an emergency occured. During the CRITICAL and EMERGENCY states the MAV is still considered to be active, but should start emergency procedures autonomously. After a failure occured it should first move from active to critical to allow manual intervention and then move to emergency after a certain timeout.
        /// </summary>
        /// <remarks>
        /// SYS_STATUS
        /// </remarks>
        [Description(@"The general system state. If the system is following the MAVLink standard, the system state is mainly defined by three orthogonal states/modes: The system mode, which is either LOCKED (motors shut down and locked), MANUAL (system under RC control), GUIDED (system with autonomous position control, position setpoint controlled manually) or AUTO (system guided by path/waypoint planner). The NAV_MODE defined the current flight state: LIFTOFF (often an open-loop maneuver), LANDING, WAYPOINTS or VECTOR. This represents the internal navigation state machine. The system status shows whether the system is currently active or not and if an emergency occured. During the CRITICAL and EMERGENCY states the MAV is still considered to be active, but should start emergency procedures autonomously. After a failure occured it should first move from active to critical to allow manual intervention and then move to emergency after a certain timeout.")]
        SysStatus = 1,
        
        /// <summary>
        /// The system time is the time of the master clock, typically the computer clock of the main onboard computer.
        /// </summary>
        /// <remarks>
        /// SYSTEM_TIME
        /// </remarks>
        [Description("The system time is the time of the master clock, typically the computer clock of " +
            "the main onboard computer.")]
        SystemTime = 2,
        
        /// <summary>
        /// A ping message either requesting or responding to a ping. This allows to measure the system latencies, including serial port, radio modem and UDP connections.
        /// </summary>
        /// <remarks>
        /// PING
        /// </remarks>
        [Description("A ping message either requesting or responding to a ping. This allows to measure " +
            "the system latencies, including serial port, radio modem and UDP connections.")]
        Ping = 4,
        
        /// <summary>
        /// Request to control this MAV
        /// </summary>
        /// <remarks>
        /// CHANGE_OPERATOR_CONTROL
        /// </remarks>
        [Description("Request to control this MAV")]
        ChangeOperatorControl = 5,
        
        /// <summary>
        /// Accept / deny control of this MAV
        /// </summary>
        /// <remarks>
        /// CHANGE_OPERATOR_CONTROL_ACK
        /// </remarks>
        [Description("Accept / deny control of this MAV")]
        ChangeOperatorControlAck = 6,
        
        /// <summary>
        /// Emit an encrypted signature / key identifying this system. PLEASE NOTE: This protocol has been kept simple, so transmitting the key requires an encrypted channel for true safety.
        /// </summary>
        /// <remarks>
        /// AUTH_KEY
        /// </remarks>
        [Description("Emit an encrypted signature / key identifying this system. PLEASE NOTE: This prot" +
            "ocol has been kept simple, so transmitting the key requires an encrypted channel" +
            " for true safety.")]
        AuthKey = 7,
        
        /// <summary>
        /// THIS INTERFACE IS DEPRECATED. USE COMMAND_LONG with MAV_CMD_DO_SET_MODE INSTEAD. Set the system mode, as defined by enum MAV_MODE. There is no target component id as the mode is by definition for the overall aircraft, not only for one component.
        /// </summary>
        /// <remarks>
        /// SET_MODE
        /// </remarks>
        [Description("THIS INTERFACE IS DEPRECATED. USE COMMAND_LONG with MAV_CMD_DO_SET_MODE INSTEAD. " +
            "Set the system mode, as defined by enum MAV_MODE. There is no target component i" +
            "d as the mode is by definition for the overall aircraft, not only for one compon" +
            "ent.")]
        SetMode = 11,
        
        /// <summary>
        /// Request to read the onboard parameter with the param_id string id. Onboard parameters are stored as key[const char*] -> value[float]. This allows to send a parameter to any other component (such as the GCS) without the need of previous knowledge of possible parameter names. Thus the same GCS can store different parameters for different autopilots. See also https://mavlink.io/en/protocol/parameter.html for a full documentation of QGroundControl and IMU code.
        /// </summary>
        /// <remarks>
        /// PARAM_REQUEST_READ
        /// </remarks>
        [Description(@"Request to read the onboard parameter with the param_id string id. Onboard parameters are stored as key[const char*] -> value[float]. This allows to send a parameter to any other component (such as the GCS) without the need of previous knowledge of possible parameter names. Thus the same GCS can store different parameters for different autopilots. See also https://mavlink.io/en/protocol/parameter.html for a full documentation of QGroundControl and IMU code.")]
        ParamRequestRead = 20,
        
        /// <summary>
        /// Request all parameters of this component. After this request, all parameters are emitted.
        /// </summary>
        /// <remarks>
        /// PARAM_REQUEST_LIST
        /// </remarks>
        [Description("Request all parameters of this component. After this request, all parameters are " +
            "emitted.")]
        ParamRequestList = 21,
        
        /// <summary>
        /// Emit the value of a onboard parameter. The inclusion of param_count and param_index in the message allows the recipient to keep track of received parameters and allows him to re-request missing parameters after a loss or timeout.
        /// </summary>
        /// <remarks>
        /// PARAM_VALUE
        /// </remarks>
        [Description("Emit the value of a onboard parameter. The inclusion of param_count and param_ind" +
            "ex in the message allows the recipient to keep track of received parameters and " +
            "allows him to re-request missing parameters after a loss or timeout.")]
        ParamValue = 22,
        
        /// <summary>
        /// Set a parameter value TEMPORARILY to RAM. It will be reset to default on system reboot. Send the ACTION MAV_ACTION_STORAGE_WRITE to PERMANENTLY write the RAM contents to EEPROM. IMPORTANT: The receiving component should acknowledge the new parameter value by sending a param_value message to all communication partners. This will also ensure that multiple GCS all have an up-to-date list of all parameters. If the sending GCS did not receive a PARAM_VALUE message within its timeout time, it should re-send the PARAM_SET message.
        /// </summary>
        /// <remarks>
        /// PARAM_SET
        /// </remarks>
        [Description(@"Set a parameter value TEMPORARILY to RAM. It will be reset to default on system reboot. Send the ACTION MAV_ACTION_STORAGE_WRITE to PERMANENTLY write the RAM contents to EEPROM. IMPORTANT: The receiving component should acknowledge the new parameter value by sending a param_value message to all communication partners. This will also ensure that multiple GCS all have an up-to-date list of all parameters. If the sending GCS did not receive a PARAM_VALUE message within its timeout time, it should re-send the PARAM_SET message.")]
        ParamSet = 23,
        
        /// <summary>
        /// The global position, as returned by the Global Positioning System (GPS). This is
        ///                NOT the global position estimate of the system, but rather a RAW sensor value. See message GLOBAL_POSITION for the global position estimate. Coordinate frame is right-handed, Z-axis up (GPS frame).
        /// </summary>
        /// <remarks>
        /// GPS_RAW_INT
        /// </remarks>
        [Description(@"The global position, as returned by the Global Positioning System (GPS). This is
                NOT the global position estimate of the system, but rather a RAW sensor value. See message GLOBAL_POSITION for the global position estimate. Coordinate frame is right-handed, Z-axis up (GPS frame).")]
        GpsRawInt = 24,
        
        /// <summary>
        /// The positioning status, as reported by GPS. This message is intended to display status information about each satellite visible to the receiver. See message GLOBAL_POSITION for the global position estimate. This message can contain information for up to 20 satellites.
        /// </summary>
        /// <remarks>
        /// GPS_STATUS
        /// </remarks>
        [Description(@"The positioning status, as reported by GPS. This message is intended to display status information about each satellite visible to the receiver. See message GLOBAL_POSITION for the global position estimate. This message can contain information for up to 20 satellites.")]
        GpsStatus = 25,
        
        /// <summary>
        /// The RAW IMU readings for the usual 9DOF sensor setup. This message should contain the scaled values to the described units
        /// </summary>
        /// <remarks>
        /// SCALED_IMU
        /// </remarks>
        [Description("The RAW IMU readings for the usual 9DOF sensor setup. This message should contain" +
            " the scaled values to the described units")]
        ScaledImu = 26,
        
        /// <summary>
        /// The RAW IMU readings for the usual 9DOF sensor setup. This message should always contain the true raw values without any scaling to allow data capture and system debugging.
        /// </summary>
        /// <remarks>
        /// RAW_IMU
        /// </remarks>
        [Description("The RAW IMU readings for the usual 9DOF sensor setup. This message should always " +
            "contain the true raw values without any scaling to allow data capture and system" +
            " debugging.")]
        RawImu = 27,
        
        /// <summary>
        /// The RAW pressure readings for the typical setup of one absolute pressure and one differential pressure sensor. The sensor values should be the raw, UNSCALED ADC values.
        /// </summary>
        /// <remarks>
        /// RAW_PRESSURE
        /// </remarks>
        [Description("The RAW pressure readings for the typical setup of one absolute pressure and one " +
            "differential pressure sensor. The sensor values should be the raw, UNSCALED ADC " +
            "values.")]
        RawPressure = 28,
        
        /// <summary>
        /// The pressure readings for the typical setup of one absolute and differential pressure sensor. The units are as specified in each field.
        /// </summary>
        /// <remarks>
        /// SCALED_PRESSURE
        /// </remarks>
        [Description("The pressure readings for the typical setup of one absolute and differential pres" +
            "sure sensor. The units are as specified in each field.")]
        ScaledPressure = 29,
        
        /// <summary>
        /// The attitude in the aeronautical frame (right-handed, Z-down, X-front, Y-right).
        /// </summary>
        /// <remarks>
        /// ATTITUDE
        /// </remarks>
        [Description("The attitude in the aeronautical frame (right-handed, Z-down, X-front, Y-right).")]
        Attitude = 30,
        
        /// <summary>
        /// The attitude in the aeronautical frame (right-handed, Z-down, X-front, Y-right), expressed as quaternion. Quaternion order is w, x, y, z and a zero rotation would be expressed as (1 0 0 0).
        /// </summary>
        /// <remarks>
        /// ATTITUDE_QUATERNION
        /// </remarks>
        [Description("The attitude in the aeronautical frame (right-handed, Z-down, X-front, Y-right), " +
            "expressed as quaternion. Quaternion order is w, x, y, z and a zero rotation woul" +
            "d be expressed as (1 0 0 0).")]
        AttitudeQuaternion = 31,
        
        /// <summary>
        /// The filtered local position (e.g. fused computer vision and accelerometers). Coordinate frame is right-handed, Z-axis down (aeronautical frame, NED / north-east-down convention)
        /// </summary>
        /// <remarks>
        /// LOCAL_POSITION_NED
        /// </remarks>
        [Description("The filtered local position (e.g. fused computer vision and accelerometers). Coor" +
            "dinate frame is right-handed, Z-axis down (aeronautical frame, NED / north-east-" +
            "down convention)")]
        LocalPositionNed = 32,
        
        /// <summary>
        /// The filtered global position (e.g. fused GPS and accelerometers). The position is in GPS-frame (right-handed, Z-up). It
        ///               is designed as scaled integer message since the resolution of float is not sufficient.
        /// </summary>
        /// <remarks>
        /// GLOBAL_POSITION_INT
        /// </remarks>
        [Description("The filtered global position (e.g. fused GPS and accelerometers). The position is" +
            " in GPS-frame (right-handed, Z-up). It\r\n               is designed as scaled int" +
            "eger message since the resolution of float is not sufficient.")]
        GlobalPositionInt = 33,
        
        /// <summary>
        /// The scaled values of the RC channels received. (-100%) -10000, (0%) 0, (100%) 10000. Channels that are inactive should be set to UINT16_MAX.
        /// </summary>
        /// <remarks>
        /// RC_CHANNELS_SCALED
        /// </remarks>
        [Description("The scaled values of the RC channels received. (-100%) -10000, (0%) 0, (100%) 100" +
            "00. Channels that are inactive should be set to UINT16_MAX.")]
        RcChannelsScaled = 34,
        
        /// <summary>
        /// The RAW values of the RC channels received. The standard PPM modulation is as follows: 1000 microseconds: 0%, 2000 microseconds: 100%. Individual receivers/transmitters might violate this specification.
        /// </summary>
        /// <remarks>
        /// RC_CHANNELS_RAW
        /// </remarks>
        [Description("The RAW values of the RC channels received. The standard PPM modulation is as fol" +
            "lows: 1000 microseconds: 0%, 2000 microseconds: 100%. Individual receivers/trans" +
            "mitters might violate this specification.")]
        RcChannelsRaw = 35,
        
        /// <summary>
        /// The RAW values of the servo outputs (for RC input from the remote, use the RC_CHANNELS messages). The standard PPM modulation is as follows: 1000 microseconds: 0%, 2000 microseconds: 100%.
        /// </summary>
        /// <remarks>
        /// SERVO_OUTPUT_RAW
        /// </remarks>
        [Description("The RAW values of the servo outputs (for RC input from the remote, use the RC_CHA" +
            "NNELS messages). The standard PPM modulation is as follows: 1000 microseconds: 0" +
            "%, 2000 microseconds: 100%.")]
        ServoOutputRaw = 36,
        
        /// <summary>
        /// Request a partial list of mission items from the system/component. https://mavlink.io/en/protocol/mission.html. If start and end index are the same, just send one waypoint.
        /// </summary>
        /// <remarks>
        /// MISSION_REQUEST_PARTIAL_LIST
        /// </remarks>
        [Description("Request a partial list of mission items from the system/component. https://mavlin" +
            "k.io/en/protocol/mission.html. If start and end index are the same, just send on" +
            "e waypoint.")]
        MissionRequestPartialList = 37,
        
        /// <summary>
        /// This message is sent to the MAV to write a partial list. If start index == end index, only one item will be transmitted / updated. If the start index is NOT 0 and above the current list size, this request should be REJECTED!
        /// </summary>
        /// <remarks>
        /// MISSION_WRITE_PARTIAL_LIST
        /// </remarks>
        [Description("This message is sent to the MAV to write a partial list. If start index == end in" +
            "dex, only one item will be transmitted / updated. If the start index is NOT 0 an" +
            "d above the current list size, this request should be REJECTED!")]
        MissionWritePartialList = 38,
        
        /// <summary>
        /// Message encoding a mission item. This message is emitted to announce
        ///                the presence of a mission item and to set a mission item on the system. The mission item can be either in x, y, z meters (type: LOCAL) or x:lat, y:lon, z:altitude. Local frame is Z-down, right handed (NED), global frame is Z-up, right handed (ENU). See also https://mavlink.io/en/protocol/mission.html.
        /// </summary>
        /// <remarks>
        /// MISSION_ITEM
        /// </remarks>
        [Description(@"Message encoding a mission item. This message is emitted to announce
                the presence of a mission item and to set a mission item on the system. The mission item can be either in x, y, z meters (type: LOCAL) or x:lat, y:lon, z:altitude. Local frame is Z-down, right handed (NED), global frame is Z-up, right handed (ENU). See also https://mavlink.io/en/protocol/mission.html.")]
        MissionItem = 39,
        
        /// <summary>
        /// Request the information of the mission item with the sequence number seq. The response of the system to this message should be a MISSION_ITEM message. https://mavlink.io/en/protocol/mission.html
        /// </summary>
        /// <remarks>
        /// MISSION_REQUEST
        /// </remarks>
        [Description("Request the information of the mission item with the sequence number seq. The res" +
            "ponse of the system to this message should be a MISSION_ITEM message. https://ma" +
            "vlink.io/en/protocol/mission.html")]
        MissionRequest = 40,
        
        /// <summary>
        /// Set the mission item with sequence number seq as current item. This means that the MAV will continue to this mission item on the shortest path (not following the mission items in-between).
        /// </summary>
        /// <remarks>
        /// MISSION_SET_CURRENT
        /// </remarks>
        [Description("Set the mission item with sequence number seq as current item. This means that th" +
            "e MAV will continue to this mission item on the shortest path (not following the" +
            " mission items in-between).")]
        MissionSetCurrent = 41,
        
        /// <summary>
        /// Message that announces the sequence number of the current active mission item. The MAV will fly towards this mission item.
        /// </summary>
        /// <remarks>
        /// MISSION_CURRENT
        /// </remarks>
        [Description("Message that announces the sequence number of the current active mission item. Th" +
            "e MAV will fly towards this mission item.")]
        MissionCurrent = 42,
        
        /// <summary>
        /// Request the overall list of mission items from the system/component.
        /// </summary>
        /// <remarks>
        /// MISSION_REQUEST_LIST
        /// </remarks>
        [Description("Request the overall list of mission items from the system/component.")]
        MissionRequestList = 43,
        
        /// <summary>
        /// This message is emitted as response to MISSION_REQUEST_LIST by the MAV and to initiate a write transaction. The GCS can then request the individual mission item based on the knowledge of the total number of waypoints.
        /// </summary>
        /// <remarks>
        /// MISSION_COUNT
        /// </remarks>
        [Description("This message is emitted as response to MISSION_REQUEST_LIST by the MAV and to ini" +
            "tiate a write transaction. The GCS can then request the individual mission item " +
            "based on the knowledge of the total number of waypoints.")]
        MissionCount = 44,
        
        /// <summary>
        /// Delete all mission items at once.
        /// </summary>
        /// <remarks>
        /// MISSION_CLEAR_ALL
        /// </remarks>
        [Description("Delete all mission items at once.")]
        MissionClearAll = 45,
        
        /// <summary>
        /// A certain mission item has been reached. The system will either hold this position (or circle on the orbit) or (if the autocontinue on the WP was set) continue to the next waypoint.
        /// </summary>
        /// <remarks>
        /// MISSION_ITEM_REACHED
        /// </remarks>
        [Description("A certain mission item has been reached. The system will either hold this positio" +
            "n (or circle on the orbit) or (if the autocontinue on the WP was set) continue t" +
            "o the next waypoint.")]
        MissionItemReached = 46,
        
        /// <summary>
        /// Ack message during waypoint handling. The type field states if this message is a positive ack (type=0) or if an error happened (type=non-zero).
        /// </summary>
        /// <remarks>
        /// MISSION_ACK
        /// </remarks>
        [Description("Ack message during waypoint handling. The type field states if this message is a " +
            "positive ack (type=0) or if an error happened (type=non-zero).")]
        MissionAck = 47,
        
        /// <summary>
        /// As local waypoints exist, the global waypoint reference allows to transform between the local coordinate frame and the global (GPS) coordinate frame. This can be necessary when e.g. in- and outdoor settings are connected and the MAV should move from in- to outdoor.
        /// </summary>
        /// <remarks>
        /// SET_GPS_GLOBAL_ORIGIN
        /// </remarks>
        [Description(@"As local waypoints exist, the global waypoint reference allows to transform between the local coordinate frame and the global (GPS) coordinate frame. This can be necessary when e.g. in- and outdoor settings are connected and the MAV should move from in- to outdoor.")]
        SetGpsGlobalOrigin = 48,
        
        /// <summary>
        /// Once the MAV sets a new GPS-Local correspondence, this message announces the origin (0,0,0) position
        /// </summary>
        /// <remarks>
        /// GPS_GLOBAL_ORIGIN
        /// </remarks>
        [Description("Once the MAV sets a new GPS-Local correspondence, this message announces the orig" +
            "in (0,0,0) position")]
        GpsGlobalOrigin = 49,
        
        /// <summary>
        /// Bind a RC channel to a parameter. The parameter should change accoding to the RC channel value.
        /// </summary>
        /// <remarks>
        /// PARAM_MAP_RC
        /// </remarks>
        [Description("Bind a RC channel to a parameter. The parameter should change accoding to the RC " +
            "channel value.")]
        ParamMapRc = 50,
        
        /// <summary>
        /// Request the information of the mission item with the sequence number seq. The response of the system to this message should be a MISSION_ITEM_INT message. https://mavlink.io/en/protocol/mission.html
        /// </summary>
        /// <remarks>
        /// MISSION_REQUEST_INT
        /// </remarks>
        [Description("Request the information of the mission item with the sequence number seq. The res" +
            "ponse of the system to this message should be a MISSION_ITEM_INT message. https:" +
            "//mavlink.io/en/protocol/mission.html")]
        MissionRequestInt = 51,
        
        /// <summary>
        /// Set a safety zone (volume), which is defined by two corners of a cube. This message can be used to tell the MAV which setpoints/waypoints to accept and which to reject. Safety areas are often enforced by national or competition regulations.
        /// </summary>
        /// <remarks>
        /// SAFETY_SET_ALLOWED_AREA
        /// </remarks>
        [Description("Set a safety zone (volume), which is defined by two corners of a cube. This messa" +
            "ge can be used to tell the MAV which setpoints/waypoints to accept and which to " +
            "reject. Safety areas are often enforced by national or competition regulations.")]
        SafetySetAllowedArea = 54,
        
        /// <summary>
        /// Read out the safety zone the MAV currently assumes.
        /// </summary>
        /// <remarks>
        /// SAFETY_ALLOWED_AREA
        /// </remarks>
        [Description("Read out the safety zone the MAV currently assumes.")]
        SafetyAllowedArea = 55,
        
        /// <summary>
        /// The attitude in the aeronautical frame (right-handed, Z-down, X-front, Y-right), expressed as quaternion. Quaternion order is w, x, y, z and a zero rotation would be expressed as (1 0 0 0).
        /// </summary>
        /// <remarks>
        /// ATTITUDE_QUATERNION_COV
        /// </remarks>
        [Description("The attitude in the aeronautical frame (right-handed, Z-down, X-front, Y-right), " +
            "expressed as quaternion. Quaternion order is w, x, y, z and a zero rotation woul" +
            "d be expressed as (1 0 0 0).")]
        AttitudeQuaternionCov = 61,
        
        /// <summary>
        /// The state of the fixed wing navigation and position controller.
        /// </summary>
        /// <remarks>
        /// NAV_CONTROLLER_OUTPUT
        /// </remarks>
        [Description("The state of the fixed wing navigation and position controller.")]
        NavControllerOutput = 62,
        
        /// <summary>
        /// The filtered global position (e.g. fused GPS and accelerometers). The position is in GPS-frame (right-handed, Z-up). It  is designed as scaled integer message since the resolution of float is not sufficient. NOTE: This message is intended for onboard networks / companion computers and higher-bandwidth links and optimized for accuracy and completeness. Please use the GLOBAL_POSITION_INT message for a minimal subset.
        /// </summary>
        /// <remarks>
        /// GLOBAL_POSITION_INT_COV
        /// </remarks>
        [Description(@"The filtered global position (e.g. fused GPS and accelerometers). The position is in GPS-frame (right-handed, Z-up). It  is designed as scaled integer message since the resolution of float is not sufficient. NOTE: This message is intended for onboard networks / companion computers and higher-bandwidth links and optimized for accuracy and completeness. Please use the GLOBAL_POSITION_INT message for a minimal subset.")]
        GlobalPositionIntCov = 63,
        
        /// <summary>
        /// The filtered local position (e.g. fused computer vision and accelerometers). Coordinate frame is right-handed, Z-axis down (aeronautical frame, NED / north-east-down convention)
        /// </summary>
        /// <remarks>
        /// LOCAL_POSITION_NED_COV
        /// </remarks>
        [Description("The filtered local position (e.g. fused computer vision and accelerometers). Coor" +
            "dinate frame is right-handed, Z-axis down (aeronautical frame, NED / north-east-" +
            "down convention)")]
        LocalPositionNedCov = 64,
        
        /// <summary>
        /// The PPM values of the RC channels received. The standard PPM modulation is as follows: 1000 microseconds: 0%, 2000 microseconds: 100%. Individual receivers/transmitters might violate this specification.
        /// </summary>
        /// <remarks>
        /// RC_CHANNELS
        /// </remarks>
        [Description("The PPM values of the RC channels received. The standard PPM modulation is as fol" +
            "lows: 1000 microseconds: 0%, 2000 microseconds: 100%. Individual receivers/trans" +
            "mitters might violate this specification.")]
        RcChannels = 65,
        
        /// <summary>
        /// THIS INTERFACE IS DEPRECATED. USE SET_MESSAGE_INTERVAL INSTEAD.
        /// </summary>
        /// <remarks>
        /// REQUEST_DATA_STREAM
        /// </remarks>
        [Description("THIS INTERFACE IS DEPRECATED. USE SET_MESSAGE_INTERVAL INSTEAD.")]
        RequestDataStream = 66,
        
        /// <summary>
        /// THIS INTERFACE IS DEPRECATED. USE MESSAGE_INTERVAL INSTEAD.
        /// </summary>
        /// <remarks>
        /// DATA_STREAM
        /// </remarks>
        [Description("THIS INTERFACE IS DEPRECATED. USE MESSAGE_INTERVAL INSTEAD.")]
        DataStream = 67,
        
        /// <summary>
        /// This message provides an API for manually controlling the vehicle using standard joystick axes nomenclature, along with a joystick-like input device. Unused axes can be disabled an buttons are also transmit as boolean values of their
        /// </summary>
        /// <remarks>
        /// MANUAL_CONTROL
        /// </remarks>
        [Description("This message provides an API for manually controlling the vehicle using standard " +
            "joystick axes nomenclature, along with a joystick-like input device. Unused axes" +
            " can be disabled an buttons are also transmit as boolean values of their")]
        ManualControl = 69,
        
        /// <summary>
        /// The RAW values of the RC channels sent to the MAV to override info received from the RC radio. A value of UINT16_MAX means no change to that channel. A value of 0 means control of that channel should be released back to the RC radio. The standard PPM modulation is as follows: 1000 microseconds: 0%, 2000 microseconds: 100%. Individual receivers/transmitters might violate this specification.
        /// </summary>
        /// <remarks>
        /// RC_CHANNELS_OVERRIDE
        /// </remarks>
        [Description(@"The RAW values of the RC channels sent to the MAV to override info received from the RC radio. A value of UINT16_MAX means no change to that channel. A value of 0 means control of that channel should be released back to the RC radio. The standard PPM modulation is as follows: 1000 microseconds: 0%, 2000 microseconds: 100%. Individual receivers/transmitters might violate this specification.")]
        RcChannelsOverride = 70,
        
        /// <summary>
        /// Message encoding a mission item. This message is emitted to announce
        ///                the presence of a mission item and to set a mission item on the system. The mission item can be either in x, y, z meters (type: LOCAL) or x:lat, y:lon, z:altitude. Local frame is Z-down, right handed (NED), global frame is Z-up, right handed (ENU). See also https://mavlink.io/en/protocol/mission.html.
        /// </summary>
        /// <remarks>
        /// MISSION_ITEM_INT
        /// </remarks>
        [Description(@"Message encoding a mission item. This message is emitted to announce
                the presence of a mission item and to set a mission item on the system. The mission item can be either in x, y, z meters (type: LOCAL) or x:lat, y:lon, z:altitude. Local frame is Z-down, right handed (NED), global frame is Z-up, right handed (ENU). See also https://mavlink.io/en/protocol/mission.html.")]
        MissionItemInt = 73,
        
        /// <summary>
        /// Metrics typically displayed on a HUD for fixed wing aircraft
        /// </summary>
        /// <remarks>
        /// VFR_HUD
        /// </remarks>
        [Description("Metrics typically displayed on a HUD for fixed wing aircraft")]
        VfrHud = 74,
        
        /// <summary>
        /// Message encoding a command with parameters as scaled integers. Scaling depends on the actual command value.
        /// </summary>
        /// <remarks>
        /// COMMAND_INT
        /// </remarks>
        [Description("Message encoding a command with parameters as scaled integers. Scaling depends on" +
            " the actual command value.")]
        CommandInt = 75,
        
        /// <summary>
        /// Send a command with up to seven parameters to the MAV
        /// </summary>
        /// <remarks>
        /// COMMAND_LONG
        /// </remarks>
        [Description("Send a command with up to seven parameters to the MAV")]
        CommandLong = 76,
        
        /// <summary>
        /// Report status of a command. Includes feedback whether the command was executed.
        /// </summary>
        /// <remarks>
        /// COMMAND_ACK
        /// </remarks>
        [Description("Report status of a command. Includes feedback whether the command was executed.")]
        CommandAck = 77,
        
        /// <summary>
        /// Setpoint in roll, pitch, yaw and thrust from the operator
        /// </summary>
        /// <remarks>
        /// MANUAL_SETPOINT
        /// </remarks>
        [Description("Setpoint in roll, pitch, yaw and thrust from the operator")]
        ManualSetpoint = 81,
        
        /// <summary>
        /// Sets a desired vehicle attitude. Used by an external controller to command the vehicle (manual controller or other system).
        /// </summary>
        /// <remarks>
        /// SET_ATTITUDE_TARGET
        /// </remarks>
        [Description("Sets a desired vehicle attitude. Used by an external controller to command the ve" +
            "hicle (manual controller or other system).")]
        SetAttitudeTarget = 82,
        
        /// <summary>
        /// Reports the current commanded attitude of the vehicle as specified by the autopilot. This should match the commands sent in a SET_ATTITUDE_TARGET message if the vehicle is being controlled this way.
        /// </summary>
        /// <remarks>
        /// ATTITUDE_TARGET
        /// </remarks>
        [Description("Reports the current commanded attitude of the vehicle as specified by the autopil" +
            "ot. This should match the commands sent in a SET_ATTITUDE_TARGET message if the " +
            "vehicle is being controlled this way.")]
        AttitudeTarget = 83,
        
        /// <summary>
        /// Sets a desired vehicle position in a local north-east-down coordinate frame. Used by an external controller to command the vehicle (manual controller or other system).
        /// </summary>
        /// <remarks>
        /// SET_POSITION_TARGET_LOCAL_NED
        /// </remarks>
        [Description("Sets a desired vehicle position in a local north-east-down coordinate frame. Used" +
            " by an external controller to command the vehicle (manual controller or other sy" +
            "stem).")]
        SetPositionTargetLocalNed = 84,
        
        /// <summary>
        /// Reports the current commanded vehicle position, velocity, and acceleration as specified by the autopilot. This should match the commands sent in SET_POSITION_TARGET_LOCAL_NED if the vehicle is being controlled this way.
        /// </summary>
        /// <remarks>
        /// POSITION_TARGET_LOCAL_NED
        /// </remarks>
        [Description("Reports the current commanded vehicle position, velocity, and acceleration as spe" +
            "cified by the autopilot. This should match the commands sent in SET_POSITION_TAR" +
            "GET_LOCAL_NED if the vehicle is being controlled this way.")]
        PositionTargetLocalNed = 85,
        
        /// <summary>
        /// Sets a desired vehicle position, velocity, and/or acceleration in a global coordinate system (WGS84). Used by an external controller to command the vehicle (manual controller or other system).
        /// </summary>
        /// <remarks>
        /// SET_POSITION_TARGET_GLOBAL_INT
        /// </remarks>
        [Description("Sets a desired vehicle position, velocity, and/or acceleration in a global coordi" +
            "nate system (WGS84). Used by an external controller to command the vehicle (manu" +
            "al controller or other system).")]
        SetPositionTargetGlobalInt = 86,
        
        /// <summary>
        /// Reports the current commanded vehicle position, velocity, and acceleration as specified by the autopilot. This should match the commands sent in SET_POSITION_TARGET_GLOBAL_INT if the vehicle is being controlled this way.
        /// </summary>
        /// <remarks>
        /// POSITION_TARGET_GLOBAL_INT
        /// </remarks>
        [Description("Reports the current commanded vehicle position, velocity, and acceleration as spe" +
            "cified by the autopilot. This should match the commands sent in SET_POSITION_TAR" +
            "GET_GLOBAL_INT if the vehicle is being controlled this way.")]
        PositionTargetGlobalInt = 87,
        
        /// <summary>
        /// The offset in X, Y, Z and yaw between the LOCAL_POSITION_NED messages of MAV X and the global coordinate frame in NED coordinates. Coordinate frame is right-handed, Z-axis down (aeronautical frame, NED / north-east-down convention)
        /// </summary>
        /// <remarks>
        /// LOCAL_POSITION_NED_SYSTEM_GLOBAL_OFFSET
        /// </remarks>
        [Description("The offset in X, Y, Z and yaw between the LOCAL_POSITION_NED messages of MAV X an" +
            "d the global coordinate frame in NED coordinates. Coordinate frame is right-hand" +
            "ed, Z-axis down (aeronautical frame, NED / north-east-down convention)")]
        LocalPositionNedSystemGlobalOffset = 89,
        
        /// <summary>
        /// DEPRECATED PACKET! Suffers from missing airspeed fields and singularities due to Euler angles. Please use HIL_STATE_QUATERNION instead. Sent from simulation to autopilot. This packet is useful for high throughput applications such as hardware in the loop simulations.
        /// </summary>
        /// <remarks>
        /// HIL_STATE
        /// </remarks>
        [Description(@"DEPRECATED PACKET! Suffers from missing airspeed fields and singularities due to Euler angles. Please use HIL_STATE_QUATERNION instead. Sent from simulation to autopilot. This packet is useful for high throughput applications such as hardware in the loop simulations.")]
        HilState = 90,
        
        /// <summary>
        /// Sent from autopilot to simulation. Hardware in the loop control outputs
        /// </summary>
        /// <remarks>
        /// HIL_CONTROLS
        /// </remarks>
        [Description("Sent from autopilot to simulation. Hardware in the loop control outputs")]
        HilControls = 91,
        
        /// <summary>
        /// Sent from simulation to autopilot. The RAW values of the RC channels received. The standard PPM modulation is as follows: 1000 microseconds: 0%, 2000 microseconds: 100%. Individual receivers/transmitters might violate this specification.
        /// </summary>
        /// <remarks>
        /// HIL_RC_INPUTS_RAW
        /// </remarks>
        [Description("Sent from simulation to autopilot. The RAW values of the RC channels received. Th" +
            "e standard PPM modulation is as follows: 1000 microseconds: 0%, 2000 microsecond" +
            "s: 100%. Individual receivers/transmitters might violate this specification.")]
        HilRcInputsRaw = 92,
        
        /// <summary>
        /// Sent from autopilot to simulation. Hardware in the loop control outputs (replacement for HIL_CONTROLS)
        /// </summary>
        /// <remarks>
        /// HIL_ACTUATOR_CONTROLS
        /// </remarks>
        [Description("Sent from autopilot to simulation. Hardware in the loop control outputs (replacem" +
            "ent for HIL_CONTROLS)")]
        HilActuatorControls = 93,
        
        /// <summary>
        /// Optical flow from a flow sensor (e.g. optical mouse sensor)
        /// </summary>
        /// <remarks>
        /// OPTICAL_FLOW
        /// </remarks>
        [Description("Optical flow from a flow sensor (e.g. optical mouse sensor)")]
        OpticalFlow = 100,
        
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// GLOBAL_VISION_POSITION_ESTIMATE
        /// </remarks>
        [Description(null)]
        GlobalVisionPositionEstimate = 101,
        
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// VISION_POSITION_ESTIMATE
        /// </remarks>
        [Description(null)]
        VisionPositionEstimate = 102,
        
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// VISION_SPEED_ESTIMATE
        /// </remarks>
        [Description(null)]
        VisionSpeedEstimate = 103,
        
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// VICON_POSITION_ESTIMATE
        /// </remarks>
        [Description(null)]
        ViconPositionEstimate = 104,
        
        /// <summary>
        /// The IMU readings in SI units in NED body frame
        /// </summary>
        /// <remarks>
        /// HIGHRES_IMU
        /// </remarks>
        [Description("The IMU readings in SI units in NED body frame")]
        HighresImu = 105,
        
        /// <summary>
        /// Optical flow from an angular rate flow sensor (e.g. PX4FLOW or mouse sensor)
        /// </summary>
        /// <remarks>
        /// OPTICAL_FLOW_RAD
        /// </remarks>
        [Description("Optical flow from an angular rate flow sensor (e.g. PX4FLOW or mouse sensor)")]
        OpticalFlowRad = 106,
        
        /// <summary>
        /// The IMU readings in SI units in NED body frame
        /// </summary>
        /// <remarks>
        /// HIL_SENSOR
        /// </remarks>
        [Description("The IMU readings in SI units in NED body frame")]
        HilSensor = 107,
        
        /// <summary>
        /// Status of simulation environment, if used
        /// </summary>
        /// <remarks>
        /// SIM_STATE
        /// </remarks>
        [Description("Status of simulation environment, if used")]
        SimState = 108,
        
        /// <summary>
        /// Status generated by radio and injected into MAVLink stream.
        /// </summary>
        /// <remarks>
        /// RADIO_STATUS
        /// </remarks>
        [Description("Status generated by radio and injected into MAVLink stream.")]
        RadioStatus = 109,
        
        /// <summary>
        /// File transfer message
        /// </summary>
        /// <remarks>
        /// FILE_TRANSFER_PROTOCOL
        /// </remarks>
        [Description("File transfer message")]
        FileTransferProtocol = 110,
        
        /// <summary>
        /// Time synchronization message.
        /// </summary>
        /// <remarks>
        /// TIMESYNC
        /// </remarks>
        [Description("Time synchronization message.")]
        Timesync = 111,
        
        /// <summary>
        /// Camera-IMU triggering and synchronisation message.
        /// </summary>
        /// <remarks>
        /// CAMERA_TRIGGER
        /// </remarks>
        [Description("Camera-IMU triggering and synchronisation message.")]
        CameraTrigger = 112,
        
        /// <summary>
        /// The global position, as returned by the Global Positioning System (GPS). This is
        ///                 NOT the global position estimate of the sytem, but rather a RAW sensor value. See message GLOBAL_POSITION for the global position estimate. Coordinate frame is right-handed, Z-axis up (GPS frame).
        /// </summary>
        /// <remarks>
        /// HIL_GPS
        /// </remarks>
        [Description(@"The global position, as returned by the Global Positioning System (GPS). This is
                 NOT the global position estimate of the sytem, but rather a RAW sensor value. See message GLOBAL_POSITION for the global position estimate. Coordinate frame is right-handed, Z-axis up (GPS frame).")]
        HilGps = 113,
        
        /// <summary>
        /// Simulated optical flow from a flow sensor (e.g. PX4FLOW or optical mouse sensor)
        /// </summary>
        /// <remarks>
        /// HIL_OPTICAL_FLOW
        /// </remarks>
        [Description("Simulated optical flow from a flow sensor (e.g. PX4FLOW or optical mouse sensor)")]
        HilOpticalFlow = 114,
        
        /// <summary>
        /// Sent from simulation to autopilot, avoids in contrast to HIL_STATE singularities. This packet is useful for high throughput applications such as hardware in the loop simulations.
        /// </summary>
        /// <remarks>
        /// HIL_STATE_QUATERNION
        /// </remarks>
        [Description("Sent from simulation to autopilot, avoids in contrast to HIL_STATE singularities." +
            " This packet is useful for high throughput applications such as hardware in the " +
            "loop simulations.")]
        HilStateQuaternion = 115,
        
        /// <summary>
        /// The RAW IMU readings for secondary 9DOF sensor setup. This message should contain the scaled values to the described units
        /// </summary>
        /// <remarks>
        /// SCALED_IMU2
        /// </remarks>
        [Description("The RAW IMU readings for secondary 9DOF sensor setup. This message should contain" +
            " the scaled values to the described units")]
        ScaledImu2 = 116,
        
        /// <summary>
        /// Request a list of available logs. On some systems calling this may stop on-board logging until LOG_REQUEST_END is called.
        /// </summary>
        /// <remarks>
        /// LOG_REQUEST_LIST
        /// </remarks>
        [Description("Request a list of available logs. On some systems calling this may stop on-board " +
            "logging until LOG_REQUEST_END is called.")]
        LogRequestList = 117,
        
        /// <summary>
        /// Reply to LOG_REQUEST_LIST
        /// </summary>
        /// <remarks>
        /// LOG_ENTRY
        /// </remarks>
        [Description("Reply to LOG_REQUEST_LIST")]
        LogEntry = 118,
        
        /// <summary>
        /// Request a chunk of a log
        /// </summary>
        /// <remarks>
        /// LOG_REQUEST_DATA
        /// </remarks>
        [Description("Request a chunk of a log")]
        LogRequestData = 119,
        
        /// <summary>
        /// Reply to LOG_REQUEST_DATA
        /// </summary>
        /// <remarks>
        /// LOG_DATA
        /// </remarks>
        [Description("Reply to LOG_REQUEST_DATA")]
        LogData = 120,
        
        /// <summary>
        /// Erase all logs
        /// </summary>
        /// <remarks>
        /// LOG_ERASE
        /// </remarks>
        [Description("Erase all logs")]
        LogErase = 121,
        
        /// <summary>
        /// Stop log transfer and resume normal logging
        /// </summary>
        /// <remarks>
        /// LOG_REQUEST_END
        /// </remarks>
        [Description("Stop log transfer and resume normal logging")]
        LogRequestEnd = 122,
        
        /// <summary>
        /// data for injecting into the onboard GPS (used for DGPS)
        /// </summary>
        /// <remarks>
        /// GPS_INJECT_DATA
        /// </remarks>
        [Description("data for injecting into the onboard GPS (used for DGPS)")]
        GpsInjectData = 123,
        
        /// <summary>
        /// Second GPS data. Coordinate frame is right-handed, Z-axis up (GPS frame).
        /// </summary>
        /// <remarks>
        /// GPS2_RAW
        /// </remarks>
        [Description("Second GPS data. Coordinate frame is right-handed, Z-axis up (GPS frame).")]
        Gps2Raw = 124,
        
        /// <summary>
        /// Power supply status
        /// </summary>
        /// <remarks>
        /// POWER_STATUS
        /// </remarks>
        [Description("Power supply status")]
        PowerStatus = 125,
        
        /// <summary>
        /// Control a serial port. This can be used for raw access to an onboard serial peripheral such as a GPS or telemetry radio. It is designed to make it possible to update the devices firmware via MAVLink messages or change the devices settings. A message with zero bytes can be used to change just the baudrate.
        /// </summary>
        /// <remarks>
        /// SERIAL_CONTROL
        /// </remarks>
        [Description(@"Control a serial port. This can be used for raw access to an onboard serial peripheral such as a GPS or telemetry radio. It is designed to make it possible to update the devices firmware via MAVLink messages or change the devices settings. A message with zero bytes can be used to change just the baudrate.")]
        SerialControl = 126,
        
        /// <summary>
        /// RTK GPS data. Gives information on the relative baseline calculation the GPS is reporting
        /// </summary>
        /// <remarks>
        /// GPS_RTK
        /// </remarks>
        [Description("RTK GPS data. Gives information on the relative baseline calculation the GPS is r" +
            "eporting")]
        GpsRtk = 127,
        
        /// <summary>
        /// RTK GPS data. Gives information on the relative baseline calculation the GPS is reporting
        /// </summary>
        /// <remarks>
        /// GPS2_RTK
        /// </remarks>
        [Description("RTK GPS data. Gives information on the relative baseline calculation the GPS is r" +
            "eporting")]
        Gps2Rtk = 128,
        
        /// <summary>
        /// The RAW IMU readings for 3rd 9DOF sensor setup. This message should contain the scaled values to the described units
        /// </summary>
        /// <remarks>
        /// SCALED_IMU3
        /// </remarks>
        [Description("The RAW IMU readings for 3rd 9DOF sensor setup. This message should contain the s" +
            "caled values to the described units")]
        ScaledImu3 = 129,
        
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// DATA_TRANSMISSION_HANDSHAKE
        /// </remarks>
        [Description(null)]
        DataTransmissionHandshake = 130,
        
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ENCAPSULATED_DATA
        /// </remarks>
        [Description(null)]
        EncapsulatedData = 131,
        
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// DISTANCE_SENSOR
        /// </remarks>
        [Description(null)]
        DistanceSensor = 132,
        
        /// <summary>
        /// Request for terrain data and terrain status
        /// </summary>
        /// <remarks>
        /// TERRAIN_REQUEST
        /// </remarks>
        [Description("Request for terrain data and terrain status")]
        TerrainRequest = 133,
        
        /// <summary>
        /// Terrain data sent from GCS. The lat/lon and grid_spacing must be the same as a lat/lon from a TERRAIN_REQUEST
        /// </summary>
        /// <remarks>
        /// TERRAIN_DATA
        /// </remarks>
        [Description("Terrain data sent from GCS. The lat/lon and grid_spacing must be the same as a la" +
            "t/lon from a TERRAIN_REQUEST")]
        TerrainData = 134,
        
        /// <summary>
        /// Request that the vehicle report terrain height at the given location. Used by GCS to check if vehicle has all terrain data needed for a mission.
        /// </summary>
        /// <remarks>
        /// TERRAIN_CHECK
        /// </remarks>
        [Description("Request that the vehicle report terrain height at the given location. Used by GCS" +
            " to check if vehicle has all terrain data needed for a mission.")]
        TerrainCheck = 135,
        
        /// <summary>
        /// Response from a TERRAIN_CHECK request
        /// </summary>
        /// <remarks>
        /// TERRAIN_REPORT
        /// </remarks>
        [Description("Response from a TERRAIN_CHECK request")]
        TerrainReport = 136,
        
        /// <summary>
        /// Barometer readings for 2nd barometer
        /// </summary>
        /// <remarks>
        /// SCALED_PRESSURE2
        /// </remarks>
        [Description("Barometer readings for 2nd barometer")]
        ScaledPressure2 = 137,
        
        /// <summary>
        /// Motion capture attitude and position
        /// </summary>
        /// <remarks>
        /// ATT_POS_MOCAP
        /// </remarks>
        [Description("Motion capture attitude and position")]
        AttPosMocap = 138,
        
        /// <summary>
        /// Set the vehicle attitude and body angular rates.
        /// </summary>
        /// <remarks>
        /// SET_ACTUATOR_CONTROL_TARGET
        /// </remarks>
        [Description("Set the vehicle attitude and body angular rates.")]
        SetActuatorControlTarget = 139,
        
        /// <summary>
        /// Set the vehicle attitude and body angular rates.
        /// </summary>
        /// <remarks>
        /// ACTUATOR_CONTROL_TARGET
        /// </remarks>
        [Description("Set the vehicle attitude and body angular rates.")]
        ActuatorControlTarget = 140,
        
        /// <summary>
        /// The current system altitude.
        /// </summary>
        /// <remarks>
        /// ALTITUDE
        /// </remarks>
        [Description("The current system altitude.")]
        Altitude = 141,
        
        /// <summary>
        /// The autopilot is requesting a resource (file, binary, other type of data)
        /// </summary>
        /// <remarks>
        /// RESOURCE_REQUEST
        /// </remarks>
        [Description("The autopilot is requesting a resource (file, binary, other type of data)")]
        ResourceRequest = 142,
        
        /// <summary>
        /// Barometer readings for 3rd barometer
        /// </summary>
        /// <remarks>
        /// SCALED_PRESSURE3
        /// </remarks>
        [Description("Barometer readings for 3rd barometer")]
        ScaledPressure3 = 143,
        
        /// <summary>
        /// current motion information from a designated system
        /// </summary>
        /// <remarks>
        /// FOLLOW_TARGET
        /// </remarks>
        [Description("current motion information from a designated system")]
        FollowTarget = 144,
        
        /// <summary>
        /// The smoothed, monotonic system state used to feed the control loops of the system.
        /// </summary>
        /// <remarks>
        /// CONTROL_SYSTEM_STATE
        /// </remarks>
        [Description("The smoothed, monotonic system state used to feed the control loops of the system" +
            ".")]
        ControlSystemState = 146,
        
        /// <summary>
        /// Battery information
        /// </summary>
        /// <remarks>
        /// BATTERY_STATUS
        /// </remarks>
        [Description("Battery information")]
        BatteryStatus = 147,
        
        /// <summary>
        /// Version and capability of autopilot software
        /// </summary>
        /// <remarks>
        /// AUTOPILOT_VERSION
        /// </remarks>
        [Description("Version and capability of autopilot software")]
        AutopilotVersion = 148,
        
        /// <summary>
        /// The location of a landing area captured from a downward facing camera
        /// </summary>
        /// <remarks>
        /// LANDING_TARGET
        /// </remarks>
        [Description("The location of a landing area captured from a downward facing camera")]
        LandingTarget = 149,
        
        /// <summary>
        /// Estimator status message including flags, innovation test ratios and estimated accuracies. The flags message is an integer bitmask containing information on which EKF outputs are valid. See the ESTIMATOR_STATUS_FLAGS enum definition for further information. The innovaton test ratios show the magnitude of the sensor innovation divided by the innovation check threshold. Under normal operation the innovaton test ratios should be below 0.5 with occasional values up to 1.0. Values greater than 1.0 should be rare under normal operation and indicate that a measurement has been rejected by the filter. The user should be notified if an innovation test ratio greater than 1.0 is recorded. Notifications for values in the range between 0.5 and 1.0 should be optional and controllable by the user.
        /// </summary>
        /// <remarks>
        /// ESTIMATOR_STATUS
        /// </remarks>
        [Description(@"Estimator status message including flags, innovation test ratios and estimated accuracies. The flags message is an integer bitmask containing information on which EKF outputs are valid. See the ESTIMATOR_STATUS_FLAGS enum definition for further information. The innovaton test ratios show the magnitude of the sensor innovation divided by the innovation check threshold. Under normal operation the innovaton test ratios should be below 0.5 with occasional values up to 1.0. Values greater than 1.0 should be rare under normal operation and indicate that a measurement has been rejected by the filter. The user should be notified if an innovation test ratio greater than 1.0 is recorded. Notifications for values in the range between 0.5 and 1.0 should be optional and controllable by the user.")]
        EstimatorStatus = 230,
        
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// WIND_COV
        /// </remarks>
        [Description(null)]
        WindCov = 231,
        
        /// <summary>
        /// GPS sensor input message.  This is a raw sensor value sent by the GPS. This is NOT the global position estimate of the sytem.
        /// </summary>
        /// <remarks>
        /// GPS_INPUT
        /// </remarks>
        [Description("GPS sensor input message.  This is a raw sensor value sent by the GPS. This is NO" +
            "T the global position estimate of the sytem.")]
        GpsInput = 232,
        
        /// <summary>
        /// RTCM message for injecting into the onboard GPS (used for DGPS)
        /// </summary>
        /// <remarks>
        /// GPS_RTCM_DATA
        /// </remarks>
        [Description("RTCM message for injecting into the onboard GPS (used for DGPS)")]
        GpsRtcmData = 233,
        
        /// <summary>
        /// Message appropriate for high latency connections like Iridium
        /// </summary>
        /// <remarks>
        /// HIGH_LATENCY
        /// </remarks>
        [Description("Message appropriate for high latency connections like Iridium")]
        HighLatency = 234,
        
        /// <summary>
        /// WIP: Message appropriate for high latency connections like Iridium (version 2)
        /// </summary>
        /// <remarks>
        /// HIGH_LATENCY2
        /// </remarks>
        [Description("WIP: Message appropriate for high latency connections like Iridium (version 2)")]
        HighLatency2 = 235,
        
        /// <summary>
        /// Vibration levels and accelerometer clipping
        /// </summary>
        /// <remarks>
        /// VIBRATION
        /// </remarks>
        [Description("Vibration levels and accelerometer clipping")]
        Vibration = 241,
        
        /// <summary>
        /// This message can be requested by sending the MAV_CMD_GET_HOME_POSITION command. The position the system will return to and land on. The position is set automatically by the system during the takeoff in case it was not explicitely set by the operator before or after. The position the system will return to and land on. The global and local positions encode the position in the respective coordinate frames, while the q parameter encodes the orientation of the surface. Under normal conditions it describes the heading and terrain slope, which can be used by the aircraft to adjust the approach. The approach 3D vector describes the point to which the system should fly in normal flight mode and then perform a landing sequence along the vector.
        /// </summary>
        /// <remarks>
        /// HOME_POSITION
        /// </remarks>
        [Description(@"This message can be requested by sending the MAV_CMD_GET_HOME_POSITION command. The position the system will return to and land on. The position is set automatically by the system during the takeoff in case it was not explicitely set by the operator before or after. The position the system will return to and land on. The global and local positions encode the position in the respective coordinate frames, while the q parameter encodes the orientation of the surface. Under normal conditions it describes the heading and terrain slope, which can be used by the aircraft to adjust the approach. The approach 3D vector describes the point to which the system should fly in normal flight mode and then perform a landing sequence along the vector.")]
        HomePosition = 242,
        
        /// <summary>
        /// The position the system will return to and land on. The position is set automatically by the system during the takeoff in case it was not explicitely set by the operator before or after. The global and local positions encode the position in the respective coordinate frames, while the q parameter encodes the orientation of the surface. Under normal conditions it describes the heading and terrain slope, which can be used by the aircraft to adjust the approach. The approach 3D vector describes the point to which the system should fly in normal flight mode and then perform a landing sequence along the vector.
        /// </summary>
        /// <remarks>
        /// SET_HOME_POSITION
        /// </remarks>
        [Description(@"The position the system will return to and land on. The position is set automatically by the system during the takeoff in case it was not explicitely set by the operator before or after. The global and local positions encode the position in the respective coordinate frames, while the q parameter encodes the orientation of the surface. Under normal conditions it describes the heading and terrain slope, which can be used by the aircraft to adjust the approach. The approach 3D vector describes the point to which the system should fly in normal flight mode and then perform a landing sequence along the vector.")]
        SetHomePosition = 243,
        
        /// <summary>
        /// This interface replaces DATA_STREAM
        /// </summary>
        /// <remarks>
        /// MESSAGE_INTERVAL
        /// </remarks>
        [Description("This interface replaces DATA_STREAM")]
        MessageInterval = 244,
        
        /// <summary>
        /// Provides state for additional features
        /// </summary>
        /// <remarks>
        /// EXTENDED_SYS_STATE
        /// </remarks>
        [Description("Provides state for additional features")]
        ExtendedSysState = 245,
        
        /// <summary>
        /// The location and information of an ADSB vehicle
        /// </summary>
        /// <remarks>
        /// ADSB_VEHICLE
        /// </remarks>
        [Description("The location and information of an ADSB vehicle")]
        AdsbVehicle = 246,
        
        /// <summary>
        /// Information about a potential collision
        /// </summary>
        /// <remarks>
        /// COLLISION
        /// </remarks>
        [Description("Information about a potential collision")]
        Collision = 247,
        
        /// <summary>
        /// Message implementing parts of the V2 payload specs in V1 frames for transitional support.
        /// </summary>
        /// <remarks>
        /// V2_EXTENSION
        /// </remarks>
        [Description("Message implementing parts of the V2 payload specs in V1 frames for transitional " +
            "support.")]
        V2Extension = 248,
        
        /// <summary>
        /// Send raw controller memory. The use of this message is discouraged for normal packets, but a quite efficient way for testing new messages and getting experimental debug output.
        /// </summary>
        /// <remarks>
        /// MEMORY_VECT
        /// </remarks>
        [Description("Send raw controller memory. The use of this message is discouraged for normal pac" +
            "kets, but a quite efficient way for testing new messages and getting experimenta" +
            "l debug output.")]
        MemoryVect = 249,
        
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// DEBUG_VECT
        /// </remarks>
        [Description(null)]
        DebugVect = 250,
        
        /// <summary>
        /// Send a key-value pair as float. The use of this message is discouraged for normal packets, but a quite efficient way for testing new messages and getting experimental debug output.
        /// </summary>
        /// <remarks>
        /// NAMED_VALUE_FLOAT
        /// </remarks>
        [Description("Send a key-value pair as float. The use of this message is discouraged for normal" +
            " packets, but a quite efficient way for testing new messages and getting experim" +
            "ental debug output.")]
        NamedValueFloat = 251,
        
        /// <summary>
        /// Send a key-value pair as integer. The use of this message is discouraged for normal packets, but a quite efficient way for testing new messages and getting experimental debug output.
        /// </summary>
        /// <remarks>
        /// NAMED_VALUE_INT
        /// </remarks>
        [Description("Send a key-value pair as integer. The use of this message is discouraged for norm" +
            "al packets, but a quite efficient way for testing new messages and getting exper" +
            "imental debug output.")]
        NamedValueInt = 252,
        
        /// <summary>
        /// Status text message. These messages are printed in yellow in the COMM console of QGroundControl. WARNING: They consume quite some bandwidth, so use only for important status and error messages. If implemented wisely, these messages are buffered on the MCU and sent only at a limited rate (e.g. 10 Hz).
        /// </summary>
        /// <remarks>
        /// STATUSTEXT
        /// </remarks>
        [Description(@"Status text message. These messages are printed in yellow in the COMM console of QGroundControl. WARNING: They consume quite some bandwidth, so use only for important status and error messages. If implemented wisely, these messages are buffered on the MCU and sent only at a limited rate (e.g. 10 Hz).")]
        Statustext = 253,
        
        /// <summary>
        /// Send a debug value. The index is used to discriminate between values. These values show up in the plot of QGroundControl as DEBUG N.
        /// </summary>
        /// <remarks>
        /// DEBUG
        /// </remarks>
        [Description("Send a debug value. The index is used to discriminate between values. These value" +
            "s show up in the plot of QGroundControl as DEBUG N.")]
        Debug = 254,
    }
}
