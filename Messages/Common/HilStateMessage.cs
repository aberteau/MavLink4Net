//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.42000
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;


namespace MavLink4Net.Messages.Common
{
    
    
    /// <summary>
    /// DEPRECATED PACKET! Suffers from missing airspeed fields and singularities due to Euler angles. Please use HIL_STATE_QUATERNION instead. Sent from simulation to autopilot. This packet is useful for high throughput applications such as hardware in the loop simulations.
    /// </summary>
    /// <remarks>
    /// HIL_STATE
    /// </remarks>
    public class HilStateMessage : MavLink4Net.Messages.Message
    {
        
        /// <summary>
        /// Timestamp (microseconds since UNIX epoch or microseconds since system boot)
        /// </summary>
        /// <remarks>
        /// time_usec
        /// </remarks>
        private ulong _timeUsec;
        
        /// <summary>
        /// Roll angle (rad)
        /// </summary>
        /// <remarks>
        /// roll
        /// </remarks>
        private float _roll;
        
        /// <summary>
        /// Pitch angle (rad)
        /// </summary>
        /// <remarks>
        /// pitch
        /// </remarks>
        private float _pitch;
        
        /// <summary>
        /// Yaw angle (rad)
        /// </summary>
        /// <remarks>
        /// yaw
        /// </remarks>
        private float _yaw;
        
        /// <summary>
        /// Body frame roll / phi angular speed (rad/s)
        /// </summary>
        /// <remarks>
        /// rollspeed
        /// </remarks>
        private float _rollspeed;
        
        /// <summary>
        /// Body frame pitch / theta angular speed (rad/s)
        /// </summary>
        /// <remarks>
        /// pitchspeed
        /// </remarks>
        private float _pitchspeed;
        
        /// <summary>
        /// Body frame yaw / psi angular speed (rad/s)
        /// </summary>
        /// <remarks>
        /// yawspeed
        /// </remarks>
        private float _yawspeed;
        
        /// <summary>
        /// Latitude, expressed as degrees * 1E7
        /// </summary>
        /// <remarks>
        /// lat
        /// </remarks>
        private int _lat;
        
        /// <summary>
        /// Longitude, expressed as degrees * 1E7
        /// </summary>
        /// <remarks>
        /// lon
        /// </remarks>
        private int _lon;
        
        /// <summary>
        /// Altitude in meters, expressed as * 1000 (millimeters)
        /// </summary>
        /// <remarks>
        /// alt
        /// </remarks>
        private int _alt;
        
        /// <summary>
        /// Ground X Speed (Latitude), expressed as m/s * 100
        /// </summary>
        /// <remarks>
        /// vx
        /// </remarks>
        private short _vx;
        
        /// <summary>
        /// Ground Y Speed (Longitude), expressed as m/s * 100
        /// </summary>
        /// <remarks>
        /// vy
        /// </remarks>
        private short _vy;
        
        /// <summary>
        /// Ground Z Speed (Altitude), expressed as m/s * 100
        /// </summary>
        /// <remarks>
        /// vz
        /// </remarks>
        private short _vz;
        
        /// <summary>
        /// X acceleration (mg)
        /// </summary>
        /// <remarks>
        /// xacc
        /// </remarks>
        private short _xacc;
        
        /// <summary>
        /// Y acceleration (mg)
        /// </summary>
        /// <remarks>
        /// yacc
        /// </remarks>
        private short _yacc;
        
        /// <summary>
        /// Z acceleration (mg)
        /// </summary>
        /// <remarks>
        /// zacc
        /// </remarks>
        private short _zacc;
        
        public HilStateMessage() : 
                base(MavLink4Net.Messages.MavMessageType.HilState, 183)
        {
        }
        
        /// <summary>
        /// Timestamp (microseconds since UNIX epoch or microseconds since system boot)
        /// </summary>
        public ulong TimeUsec
        {
            get
            {
                return this._timeUsec;
            }
            set
            {
                this._timeUsec = value;
            }
        }
        
        /// <summary>
        /// Roll angle (rad)
        /// </summary>
        public float Roll
        {
            get
            {
                return this._roll;
            }
            set
            {
                this._roll = value;
            }
        }
        
        /// <summary>
        /// Pitch angle (rad)
        /// </summary>
        public float Pitch
        {
            get
            {
                return this._pitch;
            }
            set
            {
                this._pitch = value;
            }
        }
        
        /// <summary>
        /// Yaw angle (rad)
        /// </summary>
        public float Yaw
        {
            get
            {
                return this._yaw;
            }
            set
            {
                this._yaw = value;
            }
        }
        
        /// <summary>
        /// Body frame roll / phi angular speed (rad/s)
        /// </summary>
        public float Rollspeed
        {
            get
            {
                return this._rollspeed;
            }
            set
            {
                this._rollspeed = value;
            }
        }
        
        /// <summary>
        /// Body frame pitch / theta angular speed (rad/s)
        /// </summary>
        public float Pitchspeed
        {
            get
            {
                return this._pitchspeed;
            }
            set
            {
                this._pitchspeed = value;
            }
        }
        
        /// <summary>
        /// Body frame yaw / psi angular speed (rad/s)
        /// </summary>
        public float Yawspeed
        {
            get
            {
                return this._yawspeed;
            }
            set
            {
                this._yawspeed = value;
            }
        }
        
        /// <summary>
        /// Latitude, expressed as degrees * 1E7
        /// </summary>
        public int Lat
        {
            get
            {
                return this._lat;
            }
            set
            {
                this._lat = value;
            }
        }
        
        /// <summary>
        /// Longitude, expressed as degrees * 1E7
        /// </summary>
        public int Lon
        {
            get
            {
                return this._lon;
            }
            set
            {
                this._lon = value;
            }
        }
        
        /// <summary>
        /// Altitude in meters, expressed as * 1000 (millimeters)
        /// </summary>
        public int Alt
        {
            get
            {
                return this._alt;
            }
            set
            {
                this._alt = value;
            }
        }
        
        /// <summary>
        /// Ground X Speed (Latitude), expressed as m/s * 100
        /// </summary>
        public short Vx
        {
            get
            {
                return this._vx;
            }
            set
            {
                this._vx = value;
            }
        }
        
        /// <summary>
        /// Ground Y Speed (Longitude), expressed as m/s * 100
        /// </summary>
        public short Vy
        {
            get
            {
                return this._vy;
            }
            set
            {
                this._vy = value;
            }
        }
        
        /// <summary>
        /// Ground Z Speed (Altitude), expressed as m/s * 100
        /// </summary>
        public short Vz
        {
            get
            {
                return this._vz;
            }
            set
            {
                this._vz = value;
            }
        }
        
        /// <summary>
        /// X acceleration (mg)
        /// </summary>
        public short Xacc
        {
            get
            {
                return this._xacc;
            }
            set
            {
                this._xacc = value;
            }
        }
        
        /// <summary>
        /// Y acceleration (mg)
        /// </summary>
        public short Yacc
        {
            get
            {
                return this._yacc;
            }
            set
            {
                this._yacc = value;
            }
        }
        
        /// <summary>
        /// Z acceleration (mg)
        /// </summary>
        public short Zacc
        {
            get
            {
                return this._zacc;
            }
            set
            {
                this._zacc = value;
            }
        }
    }
}
