//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.42000
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

using MavLink4Net.Messages.Metadata;
using System;
using System.ComponentModel;


namespace MavLink4Net.Messages.Common
{
    
    
    /// <summary>
    /// RTCM message for injecting into the onboard GPS (used for DGPS)
    /// </summary>
    /// <remarks>
    /// GPS_RTCM_DATA
    /// </remarks>
    [MessageMetadata(Type=MavLink4Net.Messages.MavMessageType.GpsRtcmData, Name="GPS_RTCM_DATA", Description="RTCM message for injecting into the onboard GPS (used for DGPS)")]
    public class GpsRtcmDataMessage : MavLink4Net.Messages.Message
    {
        
        /// <summary>
        /// LSB: 1 means message is fragmented, next 2 bits are the fragment ID, the remaining 5 bits are used for the sequence ID. Messages are only to be flushed to the GPS when the entire message has been reconstructed on the autopilot. The fragment ID specifies which order the fragments should be assembled into a buffer, while the sequence ID is used to detect a mismatch between different buffers. The buffer is considered fully reconstructed when either all 4 fragments are present, or all the fragments before the first fragment with a non full payload is received. This management is used to ensure that normal GPS operation doesn't corrupt RTCM data, and to recover from a unreliable transport delivery order.
        /// </summary>
        /// <remarks>
        /// flags
        /// </remarks>
        private byte _flags;
        
        /// <summary>
        /// data length
        /// </summary>
        /// <remarks>
        /// len
        /// </remarks>
        private byte _len;
        
        /// <summary>
        /// RTCM message (may be fragmented)
        /// </summary>
        /// <remarks>
        /// data
        /// </remarks>
        private byte[] _data = new byte[180];
        
        public GpsRtcmDataMessage() : 
                base(MavLink4Net.Messages.MavMessageType.GpsRtcmData, 35)
        {
        }
        
        /// <summary>
        /// LSB: 1 means message is fragmented, next 2 bits are the fragment ID, the remaining 5 bits are used for the sequence ID. Messages are only to be flushed to the GPS when the entire message has been reconstructed on the autopilot. The fragment ID specifies which order the fragments should be assembled into a buffer, while the sequence ID is used to detect a mismatch between different buffers. The buffer is considered fully reconstructed when either all 4 fragments are present, or all the fragments before the first fragment with a non full payload is received. This management is used to ensure that normal GPS operation doesn't corrupt RTCM data, and to recover from a unreliable transport delivery order.
        /// </summary>
        [MessageFieldMetadata(Name="flags", Type="uint8_t", Description=@"LSB: 1 means message is fragmented, next 2 bits are the fragment ID, the remaining 5 bits are used for the sequence ID. Messages are only to be flushed to the GPS when the entire message has been reconstructed on the autopilot. The fragment ID specifies which order the fragments should be assembled into a buffer, while the sequence ID is used to detect a mismatch between different buffers. The buffer is considered fully reconstructed when either all 4 fragments are present, or all the fragments before the first fragment with a non full payload is received. This management is used to ensure that normal GPS operation doesn't corrupt RTCM data, and to recover from a unreliable transport delivery order.")]
        public byte Flags
        {
            get
            {
                return this._flags;
            }
            set
            {
                this._flags = value;
            }
        }
        
        /// <summary>
        /// data length
        /// </summary>
        [MessageFieldMetadata(Name="len", Type="uint8_t", Units="bytes", Description="data length")]
        public byte Len
        {
            get
            {
                return this._len;
            }
            set
            {
                this._len = value;
            }
        }
        
        /// <summary>
        /// RTCM message (may be fragmented)
        /// </summary>
        [MessageFieldMetadata(Name="data", Type="uint8_t[180]", Description="RTCM message (may be fragmented)")]
        public byte[] Data
        {
            get
            {
                return this._data;
            }
            set
            {
                this._data = value;
            }
        }
    }
}
