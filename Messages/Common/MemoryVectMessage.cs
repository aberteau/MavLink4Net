//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.42000
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

using MavLink4Net.Messages.Metadata;
using System;
using System.ComponentModel;


namespace MavLink4Net.Messages.Common
{
    
    
    /// <summary>
    /// Send raw controller memory. The use of this message is discouraged for normal packets, but a quite efficient way for testing new messages and getting experimental debug output.
    /// </summary>
    /// <remarks>
    /// MEMORY_VECT
    /// </remarks>
    [MessageMetadata(Type=MavLink4Net.Messages.MavMessageType.MemoryVect, Name="MEMORY_VECT", Description="Send raw controller memory. The use of this message is discouraged for normal pac" +
        "kets, but a quite efficient way for testing new messages and getting experimenta" +
        "l debug output.")]
    public class MemoryVectMessage : MavLink4Net.Messages.Message
    {
        
        /// <summary>
        /// Starting address of the debug variables
        /// </summary>
        /// <remarks>
        /// address
        /// </remarks>
        private ushort _address;
        
        /// <summary>
        /// Version code of the type variable. 0=unknown, type ignored and assumed int16_t. 1=as below
        /// </summary>
        /// <remarks>
        /// ver
        /// </remarks>
        private byte _ver;
        
        /// <summary>
        /// Type code of the memory variables. for ver = 1: 0=16 x int16_t, 1=16 x uint16_t, 2=16 x Q15, 3=16 x 1Q14
        /// </summary>
        /// <remarks>
        /// type
        /// </remarks>
        private byte _type;
        
        /// <summary>
        /// Memory contents at specified address
        /// </summary>
        /// <remarks>
        /// value
        /// </remarks>
        private sbyte[] _value = new sbyte[32];
        
        public MemoryVectMessage() : 
                base(MavLink4Net.Messages.MavMessageType.MemoryVect)
        {
        }
        
        /// <summary>
        /// Starting address of the debug variables
        /// </summary>
        [MessageFieldMetadata(Name="address", Type="uint16_t", Description="Starting address of the debug variables")]
        public ushort Address
        {
            get
            {
                return this._address;
            }
            set
            {
                this._address = value;
            }
        }
        
        /// <summary>
        /// Version code of the type variable. 0=unknown, type ignored and assumed int16_t. 1=as below
        /// </summary>
        [MessageFieldMetadata(Name="ver", Type="uint8_t", Description="Version code of the type variable. 0=unknown, type ignored and assumed int16_t. 1" +
            "=as below")]
        public byte Ver
        {
            get
            {
                return this._ver;
            }
            set
            {
                this._ver = value;
            }
        }
        
        /// <summary>
        /// Type code of the memory variables. for ver = 1: 0=16 x int16_t, 1=16 x uint16_t, 2=16 x Q15, 3=16 x 1Q14
        /// </summary>
        [MessageFieldMetadata(Name="type", Type="uint8_t", Description="Type code of the memory variables. for ver = 1: 0=16 x int16_t, 1=16 x uint16_t, " +
            "2=16 x Q15, 3=16 x 1Q14")]
        public byte Type
        {
            get
            {
                return this._type;
            }
            set
            {
                this._type = value;
            }
        }
        
        /// <summary>
        /// Memory contents at specified address
        /// </summary>
        [MessageFieldMetadata(Name="value", Type="int8_t[32]", Description="Memory contents at specified address")]
        public sbyte[] Value
        {
            get
            {
                return this._value;
            }
            set
            {
                this._value = value;
            }
        }
    }
}
