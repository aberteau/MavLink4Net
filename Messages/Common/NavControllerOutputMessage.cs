//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.42000
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

using MavLink4Net.Messages.Metadata;
using System;
using System.ComponentModel;


namespace MavLink4Net.Messages.Common
{
    
    
    /// <summary>
    /// The state of the fixed wing navigation and position controller.
    /// </summary>
    /// <remarks>
    /// NAV_CONTROLLER_OUTPUT
    /// </remarks>
    [MessageMetadata(Type=MavLink4Net.Messages.MavMessageType.NavControllerOutput, Name="NAV_CONTROLLER_OUTPUT", Description="The state of the fixed wing navigation and position controller.")]
    public class NavControllerOutputMessage : MavLink4Net.Messages.Message
    {
        
        /// <summary>
        /// Current desired roll in degrees
        /// </summary>
        /// <remarks>
        /// nav_roll
        /// </remarks>
        private float _navRoll;
        
        /// <summary>
        /// Current desired pitch in degrees
        /// </summary>
        /// <remarks>
        /// nav_pitch
        /// </remarks>
        private float _navPitch;
        
        /// <summary>
        /// Current desired heading in degrees
        /// </summary>
        /// <remarks>
        /// nav_bearing
        /// </remarks>
        private short _navBearing;
        
        /// <summary>
        /// Bearing to current waypoint/target in degrees
        /// </summary>
        /// <remarks>
        /// target_bearing
        /// </remarks>
        private short _targetBearing;
        
        /// <summary>
        /// Distance to active waypoint in meters
        /// </summary>
        /// <remarks>
        /// wp_dist
        /// </remarks>
        private ushort _wpDist;
        
        /// <summary>
        /// Current altitude error in meters
        /// </summary>
        /// <remarks>
        /// alt_error
        /// </remarks>
        private float _altError;
        
        /// <summary>
        /// Current airspeed error in meters/second
        /// </summary>
        /// <remarks>
        /// aspd_error
        /// </remarks>
        private float _aspdError;
        
        /// <summary>
        /// Current crosstrack error on x-y plane in meters
        /// </summary>
        /// <remarks>
        /// xtrack_error
        /// </remarks>
        private float _xtrackError;
        
        public NavControllerOutputMessage() : 
                base(MavLink4Net.Messages.MavMessageType.NavControllerOutput)
        {
        }
        
        /// <summary>
        /// Current desired roll in degrees
        /// </summary>
        [MessageFieldMetadata(Name="nav_roll", Type="float", Units="deg", Description="Current desired roll in degrees")]
        public float NavRoll
        {
            get
            {
                return this._navRoll;
            }
            set
            {
                this._navRoll = value;
            }
        }
        
        /// <summary>
        /// Current desired pitch in degrees
        /// </summary>
        [MessageFieldMetadata(Name="nav_pitch", Type="float", Units="deg", Description="Current desired pitch in degrees")]
        public float NavPitch
        {
            get
            {
                return this._navPitch;
            }
            set
            {
                this._navPitch = value;
            }
        }
        
        /// <summary>
        /// Current desired heading in degrees
        /// </summary>
        [MessageFieldMetadata(Name="nav_bearing", Type="int16_t", Units="deg", Description="Current desired heading in degrees")]
        public short NavBearing
        {
            get
            {
                return this._navBearing;
            }
            set
            {
                this._navBearing = value;
            }
        }
        
        /// <summary>
        /// Bearing to current waypoint/target in degrees
        /// </summary>
        [MessageFieldMetadata(Name="target_bearing", Type="int16_t", Units="deg", Description="Bearing to current waypoint/target in degrees")]
        public short TargetBearing
        {
            get
            {
                return this._targetBearing;
            }
            set
            {
                this._targetBearing = value;
            }
        }
        
        /// <summary>
        /// Distance to active waypoint in meters
        /// </summary>
        [MessageFieldMetadata(Name="wp_dist", Type="uint16_t", Units="m", Description="Distance to active waypoint in meters")]
        public ushort WpDist
        {
            get
            {
                return this._wpDist;
            }
            set
            {
                this._wpDist = value;
            }
        }
        
        /// <summary>
        /// Current altitude error in meters
        /// </summary>
        [MessageFieldMetadata(Name="alt_error", Type="float", Units="m", Description="Current altitude error in meters")]
        public float AltError
        {
            get
            {
                return this._altError;
            }
            set
            {
                this._altError = value;
            }
        }
        
        /// <summary>
        /// Current airspeed error in meters/second
        /// </summary>
        [MessageFieldMetadata(Name="aspd_error", Type="float", Units="m/s", Description="Current airspeed error in meters/second")]
        public float AspdError
        {
            get
            {
                return this._aspdError;
            }
            set
            {
                this._aspdError = value;
            }
        }
        
        /// <summary>
        /// Current crosstrack error on x-y plane in meters
        /// </summary>
        [MessageFieldMetadata(Name="xtrack_error", Type="float", Units="m", Description="Current crosstrack error on x-y plane in meters")]
        public float XtrackError
        {
            get
            {
                return this._xtrackError;
            }
            set
            {
                this._xtrackError = value;
            }
        }
    }
}
