//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.42000
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;


namespace MavLink4Net.Messages.Common
{
    
    
    /// <summary>
    /// The filtered global position (e.g. fused GPS and accelerometers). The position is in GPS-frame (right-handed, Z-up). It
    ///               is designed as scaled integer message since the resolution of float is not sufficient.
    /// </summary>
    /// <remarks>
    /// GLOBAL_POSITION_INT
    /// </remarks>
    public class GlobalPositionIntMessage : MavLink4Net.Messages.Message
    {
        
        /// <summary>
        /// Timestamp (milliseconds since system boot)
        /// </summary>
        /// <remarks>
        /// time_boot_ms
        /// </remarks>
        private uint _timeBootMs;
        
        /// <summary>
        /// Latitude, expressed as degrees * 1E7
        /// </summary>
        /// <remarks>
        /// lat
        /// </remarks>
        private int _lat;
        
        /// <summary>
        /// Longitude, expressed as degrees * 1E7
        /// </summary>
        /// <remarks>
        /// lon
        /// </remarks>
        private int _lon;
        
        /// <summary>
        /// Altitude in meters, expressed as * 1000 (millimeters), AMSL (not WGS84 - note that virtually all GPS modules provide the AMSL as well)
        /// </summary>
        /// <remarks>
        /// alt
        /// </remarks>
        private int _alt;
        
        /// <summary>
        /// Altitude above ground in meters, expressed as * 1000 (millimeters)
        /// </summary>
        /// <remarks>
        /// relative_alt
        /// </remarks>
        private int _relativeAlt;
        
        /// <summary>
        /// Ground X Speed (Latitude, positive north), expressed as m/s * 100
        /// </summary>
        /// <remarks>
        /// vx
        /// </remarks>
        private short _vx;
        
        /// <summary>
        /// Ground Y Speed (Longitude, positive east), expressed as m/s * 100
        /// </summary>
        /// <remarks>
        /// vy
        /// </remarks>
        private short _vy;
        
        /// <summary>
        /// Ground Z Speed (Altitude, positive down), expressed as m/s * 100
        /// </summary>
        /// <remarks>
        /// vz
        /// </remarks>
        private short _vz;
        
        /// <summary>
        /// Vehicle heading (yaw angle) in degrees * 100, 0.0..359.99 degrees. If unknown, set to: UINT16_MAX
        /// </summary>
        /// <remarks>
        /// hdg
        /// </remarks>
        private ushort _hdg;
        
        public GlobalPositionIntMessage() : 
                base(MavLink4Net.Messages.MavMessageType.GlobalPositionInt, 104)
        {
        }
        
        /// <summary>
        /// Timestamp (milliseconds since system boot)
        /// </summary>
        public uint TimeBootMs
        {
            get
            {
                return this._timeBootMs;
            }
            set
            {
                this._timeBootMs = value;
            }
        }
        
        /// <summary>
        /// Latitude, expressed as degrees * 1E7
        /// </summary>
        public int Lat
        {
            get
            {
                return this._lat;
            }
            set
            {
                this._lat = value;
            }
        }
        
        /// <summary>
        /// Longitude, expressed as degrees * 1E7
        /// </summary>
        public int Lon
        {
            get
            {
                return this._lon;
            }
            set
            {
                this._lon = value;
            }
        }
        
        /// <summary>
        /// Altitude in meters, expressed as * 1000 (millimeters), AMSL (not WGS84 - note that virtually all GPS modules provide the AMSL as well)
        /// </summary>
        public int Alt
        {
            get
            {
                return this._alt;
            }
            set
            {
                this._alt = value;
            }
        }
        
        /// <summary>
        /// Altitude above ground in meters, expressed as * 1000 (millimeters)
        /// </summary>
        public int RelativeAlt
        {
            get
            {
                return this._relativeAlt;
            }
            set
            {
                this._relativeAlt = value;
            }
        }
        
        /// <summary>
        /// Ground X Speed (Latitude, positive north), expressed as m/s * 100
        /// </summary>
        public short Vx
        {
            get
            {
                return this._vx;
            }
            set
            {
                this._vx = value;
            }
        }
        
        /// <summary>
        /// Ground Y Speed (Longitude, positive east), expressed as m/s * 100
        /// </summary>
        public short Vy
        {
            get
            {
                return this._vy;
            }
            set
            {
                this._vy = value;
            }
        }
        
        /// <summary>
        /// Ground Z Speed (Altitude, positive down), expressed as m/s * 100
        /// </summary>
        public short Vz
        {
            get
            {
                return this._vz;
            }
            set
            {
                this._vz = value;
            }
        }
        
        /// <summary>
        /// Vehicle heading (yaw angle) in degrees * 100, 0.0..359.99 degrees. If unknown, set to: UINT16_MAX
        /// </summary>
        public ushort Hdg
        {
            get
            {
                return this._hdg;
            }
            set
            {
                this._hdg = value;
            }
        }
    }
}
