//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.42000
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;


namespace MavLink4Net.Messages.Common
{
    
    
    /// <summary>
    /// Reports the current commanded attitude of the vehicle as specified by the autopilot. This should match the commands sent in a SET_ATTITUDE_TARGET message if the vehicle is being controlled this way.
    /// </summary>
    /// <remarks>
    /// ATTITUDE_TARGET
    /// </remarks>
    public class AttitudeTargetMessage : MavLink4Net.Messages.Message
    {
        
        /// <summary>
        /// Timestamp in milliseconds since system boot
        /// </summary>
        /// <remarks>
        /// time_boot_ms
        /// </remarks>
        private uint _timeBootMs;
        
        /// <summary>
        /// Mappings: If any of these bits are set, the corresponding input should be ignored: bit 1: body roll rate, bit 2: body pitch rate, bit 3: body yaw rate. bit 4-bit 7: reserved, bit 8: attitude
        /// </summary>
        /// <remarks>
        /// type_mask
        /// </remarks>
        private byte _typeMask;
        
        /// <summary>
        /// Attitude quaternion (w, x, y, z order, zero-rotation is 1, 0, 0, 0)
        /// </summary>
        /// <remarks>
        /// q
        /// </remarks>
        private float[] _q = new float[4];
        
        /// <summary>
        /// Body roll rate in radians per second
        /// </summary>
        /// <remarks>
        /// body_roll_rate
        /// </remarks>
        private float _bodyRollRate;
        
        /// <summary>
        /// Body pitch rate in radians per second
        /// </summary>
        /// <remarks>
        /// body_pitch_rate
        /// </remarks>
        private float _bodyPitchRate;
        
        /// <summary>
        /// Body yaw rate in radians per second
        /// </summary>
        /// <remarks>
        /// body_yaw_rate
        /// </remarks>
        private float _bodyYawRate;
        
        /// <summary>
        /// Collective thrust, normalized to 0 .. 1 (-1 .. 1 for vehicles capable of reverse trust)
        /// </summary>
        /// <remarks>
        /// thrust
        /// </remarks>
        private float _thrust;
        
        public AttitudeTargetMessage() : 
                base(MavLink4Net.Messages.MavMessageType.AttitudeTarget, 22)
        {
        }
        
        /// <summary>
        /// Timestamp in milliseconds since system boot
        /// </summary>
        public uint TimeBootMs
        {
            get
            {
                return this._timeBootMs;
            }
            set
            {
                this._timeBootMs = value;
            }
        }
        
        /// <summary>
        /// Mappings: If any of these bits are set, the corresponding input should be ignored: bit 1: body roll rate, bit 2: body pitch rate, bit 3: body yaw rate. bit 4-bit 7: reserved, bit 8: attitude
        /// </summary>
        public byte TypeMask
        {
            get
            {
                return this._typeMask;
            }
            set
            {
                this._typeMask = value;
            }
        }
        
        /// <summary>
        /// Attitude quaternion (w, x, y, z order, zero-rotation is 1, 0, 0, 0)
        /// </summary>
        public float[] Q
        {
            get
            {
                return this._q;
            }
            set
            {
                this._q = value;
            }
        }
        
        /// <summary>
        /// Body roll rate in radians per second
        /// </summary>
        public float BodyRollRate
        {
            get
            {
                return this._bodyRollRate;
            }
            set
            {
                this._bodyRollRate = value;
            }
        }
        
        /// <summary>
        /// Body pitch rate in radians per second
        /// </summary>
        public float BodyPitchRate
        {
            get
            {
                return this._bodyPitchRate;
            }
            set
            {
                this._bodyPitchRate = value;
            }
        }
        
        /// <summary>
        /// Body yaw rate in radians per second
        /// </summary>
        public float BodyYawRate
        {
            get
            {
                return this._bodyYawRate;
            }
            set
            {
                this._bodyYawRate = value;
            }
        }
        
        /// <summary>
        /// Collective thrust, normalized to 0 .. 1 (-1 .. 1 for vehicles capable of reverse trust)
        /// </summary>
        public float Thrust
        {
            get
            {
                return this._thrust;
            }
            set
            {
                this._thrust = value;
            }
        }
    }
}
