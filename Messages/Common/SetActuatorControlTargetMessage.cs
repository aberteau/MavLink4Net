//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.42000
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;


namespace MavLink4Net.Messages.Common
{
    
    
    /// <summary>
    /// Set the vehicle attitude and body angular rates.
    /// </summary>
    /// <remarks>
    /// SET_ACTUATOR_CONTROL_TARGET
    /// </remarks>
    public class SetActuatorControlTargetMessage : MavLink4Net.Messages.Message
    {
        
        /// <summary>
        /// Timestamp (micros since boot or Unix epoch)
        /// </summary>
        /// <remarks>
        /// time_usec
        /// </remarks>
        private ulong _timeUsec;
        
        /// <summary>
        /// Actuator group. The "_mlx" indicates this is a multi-instance message and a MAVLink parser should use this field to difference between instances.
        /// </summary>
        /// <remarks>
        /// group_mlx
        /// </remarks>
        private byte _groupMlx;
        
        /// <summary>
        /// System ID
        /// </summary>
        /// <remarks>
        /// target_system
        /// </remarks>
        private byte _targetSystem;
        
        /// <summary>
        /// Component ID
        /// </summary>
        /// <remarks>
        /// target_component
        /// </remarks>
        private byte _targetComponent;
        
        /// <summary>
        /// Actuator controls. Normed to -1..+1 where 0 is neutral position. Throttle for single rotation direction motors is 0..1, negative range for reverse direction. Standard mapping for attitude controls (group 0): (index 0-7): roll, pitch, yaw, throttle, flaps, spoilers, airbrakes, landing gear. Load a pass-through mixer to repurpose them as generic outputs.
        /// </summary>
        /// <remarks>
        /// controls
        /// </remarks>
        private float[] _controls = new float[8];
        
        public SetActuatorControlTargetMessage() : 
                base(MavLink4Net.Messages.MavMessageType.SetActuatorControlTarget, 168)
        {
        }
        
        /// <summary>
        /// Timestamp (micros since boot or Unix epoch)
        /// </summary>
        public ulong TimeUsec
        {
            get
            {
                return this._timeUsec;
            }
            set
            {
                this._timeUsec = value;
            }
        }
        
        /// <summary>
        /// Actuator group. The "_mlx" indicates this is a multi-instance message and a MAVLink parser should use this field to difference between instances.
        /// </summary>
        public byte GroupMlx
        {
            get
            {
                return this._groupMlx;
            }
            set
            {
                this._groupMlx = value;
            }
        }
        
        /// <summary>
        /// System ID
        /// </summary>
        public byte TargetSystem
        {
            get
            {
                return this._targetSystem;
            }
            set
            {
                this._targetSystem = value;
            }
        }
        
        /// <summary>
        /// Component ID
        /// </summary>
        public byte TargetComponent
        {
            get
            {
                return this._targetComponent;
            }
            set
            {
                this._targetComponent = value;
            }
        }
        
        /// <summary>
        /// Actuator controls. Normed to -1..+1 where 0 is neutral position. Throttle for single rotation direction motors is 0..1, negative range for reverse direction. Standard mapping for attitude controls (group 0): (index 0-7): roll, pitch, yaw, throttle, flaps, spoilers, airbrakes, landing gear. Load a pass-through mixer to repurpose them as generic outputs.
        /// </summary>
        public float[] Controls
        {
            get
            {
                return this._controls;
            }
            set
            {
                this._controls = value;
            }
        }
    }
}
