//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.42000
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;


namespace MavLink4Net.Messages.Common
{
    
    
    /// <summary>
    /// The position the system will return to and land on. The position is set automatically by the system during the takeoff in case it was not explicitely set by the operator before or after. The global and local positions encode the position in the respective coordinate frames, while the q parameter encodes the orientation of the surface. Under normal conditions it describes the heading and terrain slope, which can be used by the aircraft to adjust the approach. The approach 3D vector describes the point to which the system should fly in normal flight mode and then perform a landing sequence along the vector.
    /// </summary>
    /// <remarks>
    /// SET_HOME_POSITION
    /// </remarks>
    public class SetHomePositionMessage : MavLink4Net.Messages.Message
    {
        
        /// <summary>
        /// System ID.
        /// </summary>
        /// <remarks>
        /// target_system
        /// </remarks>
        private byte _targetSystem;
        
        /// <summary>
        /// Latitude (WGS84), in degrees * 1E7
        /// </summary>
        /// <remarks>
        /// latitude
        /// </remarks>
        private int _latitude;
        
        /// <summary>
        /// Longitude (WGS84, in degrees * 1E7
        /// </summary>
        /// <remarks>
        /// longitude
        /// </remarks>
        private int _longitude;
        
        /// <summary>
        /// Altitude (AMSL), in meters * 1000 (positive for up)
        /// </summary>
        /// <remarks>
        /// altitude
        /// </remarks>
        private int _altitude;
        
        /// <summary>
        /// Local X position of this position in the local coordinate frame
        /// </summary>
        /// <remarks>
        /// x
        /// </remarks>
        private float _x;
        
        /// <summary>
        /// Local Y position of this position in the local coordinate frame
        /// </summary>
        /// <remarks>
        /// y
        /// </remarks>
        private float _y;
        
        /// <summary>
        /// Local Z position of this position in the local coordinate frame
        /// </summary>
        /// <remarks>
        /// z
        /// </remarks>
        private float _z;
        
        /// <summary>
        /// World to surface normal and heading transformation of the takeoff position. Used to indicate the heading and slope of the ground
        /// </summary>
        /// <remarks>
        /// q
        /// </remarks>
        private float[] _q = new float[4];
        
        /// <summary>
        /// Local X position of the end of the approach vector. Multicopters should set this position based on their takeoff path. Grass-landing fixed wing aircraft should set it the same way as multicopters. Runway-landing fixed wing aircraft should set it to the opposite direction of the takeoff, assuming the takeoff happened from the threshold / touchdown zone.
        /// </summary>
        /// <remarks>
        /// approach_x
        /// </remarks>
        private float _approachX;
        
        /// <summary>
        /// Local Y position of the end of the approach vector. Multicopters should set this position based on their takeoff path. Grass-landing fixed wing aircraft should set it the same way as multicopters. Runway-landing fixed wing aircraft should set it to the opposite direction of the takeoff, assuming the takeoff happened from the threshold / touchdown zone.
        /// </summary>
        /// <remarks>
        /// approach_y
        /// </remarks>
        private float _approachY;
        
        /// <summary>
        /// Local Z position of the end of the approach vector. Multicopters should set this position based on their takeoff path. Grass-landing fixed wing aircraft should set it the same way as multicopters. Runway-landing fixed wing aircraft should set it to the opposite direction of the takeoff, assuming the takeoff happened from the threshold / touchdown zone.
        /// </summary>
        /// <remarks>
        /// approach_z
        /// </remarks>
        private float _approachZ;
        
        /// <summary>
        /// Timestamp (microseconds since UNIX epoch or microseconds since system boot)
        /// </summary>
        /// <remarks>
        /// time_usec
        /// </remarks>
        private ulong _timeUsec;
        
        public SetHomePositionMessage() : 
                base(MavLink4Net.Messages.MavMessageType.SetHomePosition, 57)
        {
        }
        
        /// <summary>
        /// System ID.
        /// </summary>
        public byte TargetSystem
        {
            get
            {
                return this._targetSystem;
            }
            set
            {
                this._targetSystem = value;
            }
        }
        
        /// <summary>
        /// Latitude (WGS84), in degrees * 1E7
        /// </summary>
        public int Latitude
        {
            get
            {
                return this._latitude;
            }
            set
            {
                this._latitude = value;
            }
        }
        
        /// <summary>
        /// Longitude (WGS84, in degrees * 1E7
        /// </summary>
        public int Longitude
        {
            get
            {
                return this._longitude;
            }
            set
            {
                this._longitude = value;
            }
        }
        
        /// <summary>
        /// Altitude (AMSL), in meters * 1000 (positive for up)
        /// </summary>
        public int Altitude
        {
            get
            {
                return this._altitude;
            }
            set
            {
                this._altitude = value;
            }
        }
        
        /// <summary>
        /// Local X position of this position in the local coordinate frame
        /// </summary>
        public float X
        {
            get
            {
                return this._x;
            }
            set
            {
                this._x = value;
            }
        }
        
        /// <summary>
        /// Local Y position of this position in the local coordinate frame
        /// </summary>
        public float Y
        {
            get
            {
                return this._y;
            }
            set
            {
                this._y = value;
            }
        }
        
        /// <summary>
        /// Local Z position of this position in the local coordinate frame
        /// </summary>
        public float Z
        {
            get
            {
                return this._z;
            }
            set
            {
                this._z = value;
            }
        }
        
        /// <summary>
        /// World to surface normal and heading transformation of the takeoff position. Used to indicate the heading and slope of the ground
        /// </summary>
        public float[] Q
        {
            get
            {
                return this._q;
            }
            set
            {
                this._q = value;
            }
        }
        
        /// <summary>
        /// Local X position of the end of the approach vector. Multicopters should set this position based on their takeoff path. Grass-landing fixed wing aircraft should set it the same way as multicopters. Runway-landing fixed wing aircraft should set it to the opposite direction of the takeoff, assuming the takeoff happened from the threshold / touchdown zone.
        /// </summary>
        public float ApproachX
        {
            get
            {
                return this._approachX;
            }
            set
            {
                this._approachX = value;
            }
        }
        
        /// <summary>
        /// Local Y position of the end of the approach vector. Multicopters should set this position based on their takeoff path. Grass-landing fixed wing aircraft should set it the same way as multicopters. Runway-landing fixed wing aircraft should set it to the opposite direction of the takeoff, assuming the takeoff happened from the threshold / touchdown zone.
        /// </summary>
        public float ApproachY
        {
            get
            {
                return this._approachY;
            }
            set
            {
                this._approachY = value;
            }
        }
        
        /// <summary>
        /// Local Z position of the end of the approach vector. Multicopters should set this position based on their takeoff path. Grass-landing fixed wing aircraft should set it the same way as multicopters. Runway-landing fixed wing aircraft should set it to the opposite direction of the takeoff, assuming the takeoff happened from the threshold / touchdown zone.
        /// </summary>
        public float ApproachZ
        {
            get
            {
                return this._approachZ;
            }
            set
            {
                this._approachZ = value;
            }
        }
        
        /// <summary>
        /// Timestamp (microseconds since UNIX epoch or microseconds since system boot)
        /// </summary>
        public ulong TimeUsec
        {
            get
            {
                return this._timeUsec;
            }
            set
            {
                this._timeUsec = value;
            }
        }
    }
}
