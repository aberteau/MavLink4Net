//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.42000
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;


namespace MavLink4Net.Messages.Common
{
    
    
    /// <summary>
    /// The location of a landing area captured from a downward facing camera
    /// </summary>
    /// <remarks>
    /// LANDING_TARGET
    /// </remarks>
    public class LandingTargetMessage : MavLink4Net.Messages.Message
    {
        
        /// <summary>
        /// Timestamp (micros since boot or Unix epoch)
        /// </summary>
        /// <remarks>
        /// time_usec
        /// </remarks>
        private ulong _timeUsec;
        
        /// <summary>
        /// The ID of the target if multiple targets are present
        /// </summary>
        /// <remarks>
        /// target_num
        /// </remarks>
        private byte _targetNum;
        
        /// <summary>
        /// MAV_FRAME enum specifying the whether the following feilds are earth-frame, body-frame, etc.
        /// </summary>
        /// <remarks>
        /// frame
        /// </remarks>
        private Frame _frame;
        
        /// <summary>
        /// X-axis angular offset (in radians) of the target from the center of the image
        /// </summary>
        /// <remarks>
        /// angle_x
        /// </remarks>
        private float _angleX;
        
        /// <summary>
        /// Y-axis angular offset (in radians) of the target from the center of the image
        /// </summary>
        /// <remarks>
        /// angle_y
        /// </remarks>
        private float _angleY;
        
        /// <summary>
        /// Distance to the target from the vehicle in meters
        /// </summary>
        /// <remarks>
        /// distance
        /// </remarks>
        private float _distance;
        
        /// <summary>
        /// Size in radians of target along x-axis
        /// </summary>
        /// <remarks>
        /// size_x
        /// </remarks>
        private float _sizeX;
        
        /// <summary>
        /// Size in radians of target along y-axis
        /// </summary>
        /// <remarks>
        /// size_y
        /// </remarks>
        private float _sizeY;
        
        /// <summary>
        /// X Position of the landing target on MAV_FRAME
        /// </summary>
        /// <remarks>
        /// x
        /// </remarks>
        private float _x;
        
        /// <summary>
        /// Y Position of the landing target on MAV_FRAME
        /// </summary>
        /// <remarks>
        /// y
        /// </remarks>
        private float _y;
        
        /// <summary>
        /// Z Position of the landing target on MAV_FRAME
        /// </summary>
        /// <remarks>
        /// z
        /// </remarks>
        private float _z;
        
        /// <summary>
        /// Quaternion of landing target orientation (w, x, y, z order, zero-rotation is 1, 0, 0, 0)
        /// </summary>
        /// <remarks>
        /// q
        /// </remarks>
        private float[] _q = new float[4];
        
        /// <summary>
        /// LANDING_TARGET_TYPE enum specifying the type of landing target
        /// </summary>
        /// <remarks>
        /// type
        /// </remarks>
        private LandingTargetType _type;
        
        /// <summary>
        /// Boolean indicating known position (1) or default unkown position (0), for validation of positioning of the landing target
        /// </summary>
        /// <remarks>
        /// position_valid
        /// </remarks>
        private byte _positionValid;
        
        public LandingTargetMessage() : 
                base(MavLink4Net.Messages.MavMessageType.LandingTarget, 48)
        {
        }
        
        /// <summary>
        /// Timestamp (micros since boot or Unix epoch)
        /// </summary>
        public ulong TimeUsec
        {
            get
            {
                return this._timeUsec;
            }
            set
            {
                this._timeUsec = value;
            }
        }
        
        /// <summary>
        /// The ID of the target if multiple targets are present
        /// </summary>
        public byte TargetNum
        {
            get
            {
                return this._targetNum;
            }
            set
            {
                this._targetNum = value;
            }
        }
        
        /// <summary>
        /// MAV_FRAME enum specifying the whether the following feilds are earth-frame, body-frame, etc.
        /// </summary>
        public Frame Frame
        {
            get
            {
                return this._frame;
            }
            set
            {
                this._frame = value;
            }
        }
        
        /// <summary>
        /// X-axis angular offset (in radians) of the target from the center of the image
        /// </summary>
        public float AngleX
        {
            get
            {
                return this._angleX;
            }
            set
            {
                this._angleX = value;
            }
        }
        
        /// <summary>
        /// Y-axis angular offset (in radians) of the target from the center of the image
        /// </summary>
        public float AngleY
        {
            get
            {
                return this._angleY;
            }
            set
            {
                this._angleY = value;
            }
        }
        
        /// <summary>
        /// Distance to the target from the vehicle in meters
        /// </summary>
        public float Distance
        {
            get
            {
                return this._distance;
            }
            set
            {
                this._distance = value;
            }
        }
        
        /// <summary>
        /// Size in radians of target along x-axis
        /// </summary>
        public float SizeX
        {
            get
            {
                return this._sizeX;
            }
            set
            {
                this._sizeX = value;
            }
        }
        
        /// <summary>
        /// Size in radians of target along y-axis
        /// </summary>
        public float SizeY
        {
            get
            {
                return this._sizeY;
            }
            set
            {
                this._sizeY = value;
            }
        }
        
        /// <summary>
        /// X Position of the landing target on MAV_FRAME
        /// </summary>
        public float X
        {
            get
            {
                return this._x;
            }
            set
            {
                this._x = value;
            }
        }
        
        /// <summary>
        /// Y Position of the landing target on MAV_FRAME
        /// </summary>
        public float Y
        {
            get
            {
                return this._y;
            }
            set
            {
                this._y = value;
            }
        }
        
        /// <summary>
        /// Z Position of the landing target on MAV_FRAME
        /// </summary>
        public float Z
        {
            get
            {
                return this._z;
            }
            set
            {
                this._z = value;
            }
        }
        
        /// <summary>
        /// Quaternion of landing target orientation (w, x, y, z order, zero-rotation is 1, 0, 0, 0)
        /// </summary>
        public float[] Q
        {
            get
            {
                return this._q;
            }
            set
            {
                this._q = value;
            }
        }
        
        /// <summary>
        /// LANDING_TARGET_TYPE enum specifying the type of landing target
        /// </summary>
        public LandingTargetType Type
        {
            get
            {
                return this._type;
            }
            set
            {
                this._type = value;
            }
        }
        
        /// <summary>
        /// Boolean indicating known position (1) or default unkown position (0), for validation of positioning of the landing target
        /// </summary>
        public byte PositionValid
        {
            get
            {
                return this._positionValid;
            }
            set
            {
                this._positionValid = value;
            }
        }
    }
}
