//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.42000
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

using MavLink4Net.Messages.Metadata;
using System;
using System.ComponentModel;


namespace MavLink4Net.Messages.Common
{
    
    
    /// <summary>
    /// Message appropriate for high latency connections like Iridium
    /// </summary>
    /// <remarks>
    /// HIGH_LATENCY
    /// </remarks>
    [MessageMetadata(Type=MavLink4Net.Messages.MavMessageType.HighLatency, Name="HIGH_LATENCY", Description="Message appropriate for high latency connections like Iridium")]
    public class HighLatencyMessage : MavLink4Net.Messages.Message
    {
        
        /// <summary>
        /// System mode bitfield, see MAV_MODE_FLAG ENUM in mavlink/include/mavlink_types.h
        /// </summary>
        /// <remarks>
        /// base_mode
        /// </remarks>
        private ModeFlag _baseMode;
        
        /// <summary>
        /// A bitfield for use for autopilot-specific flags.
        /// </summary>
        /// <remarks>
        /// custom_mode
        /// </remarks>
        private uint _customMode;
        
        /// <summary>
        /// The landed state. Is set to MAV_LANDED_STATE_UNDEFINED if landed state is unknown.
        /// </summary>
        /// <remarks>
        /// landed_state
        /// </remarks>
        private LandedState _landedState;
        
        /// <summary>
        /// roll (centidegrees)
        /// </summary>
        /// <remarks>
        /// roll
        /// </remarks>
        private short _roll;
        
        /// <summary>
        /// pitch (centidegrees)
        /// </summary>
        /// <remarks>
        /// pitch
        /// </remarks>
        private short _pitch;
        
        /// <summary>
        /// heading (centidegrees)
        /// </summary>
        /// <remarks>
        /// heading
        /// </remarks>
        private ushort _heading;
        
        /// <summary>
        /// throttle (percentage)
        /// </summary>
        /// <remarks>
        /// throttle
        /// </remarks>
        private sbyte _throttle;
        
        /// <summary>
        /// heading setpoint (centidegrees)
        /// </summary>
        /// <remarks>
        /// heading_sp
        /// </remarks>
        private short _headingSp;
        
        /// <summary>
        /// Latitude, expressed as degrees * 1E7
        /// </summary>
        /// <remarks>
        /// latitude
        /// </remarks>
        private int _latitude;
        
        /// <summary>
        /// Longitude, expressed as degrees * 1E7
        /// </summary>
        /// <remarks>
        /// longitude
        /// </remarks>
        private int _longitude;
        
        /// <summary>
        /// Altitude above mean sea level (meters)
        /// </summary>
        /// <remarks>
        /// altitude_amsl
        /// </remarks>
        private short _altitudeAmsl;
        
        /// <summary>
        /// Altitude setpoint relative to the home position (meters)
        /// </summary>
        /// <remarks>
        /// altitude_sp
        /// </remarks>
        private short _altitudeSp;
        
        /// <summary>
        /// airspeed (m/s)
        /// </summary>
        /// <remarks>
        /// airspeed
        /// </remarks>
        private byte _airspeed;
        
        /// <summary>
        /// airspeed setpoint (m/s)
        /// </summary>
        /// <remarks>
        /// airspeed_sp
        /// </remarks>
        private byte _airspeedSp;
        
        /// <summary>
        /// groundspeed (m/s)
        /// </summary>
        /// <remarks>
        /// groundspeed
        /// </remarks>
        private byte _groundspeed;
        
        /// <summary>
        /// climb rate (m/s)
        /// </summary>
        /// <remarks>
        /// climb_rate
        /// </remarks>
        private sbyte _climbRate;
        
        /// <summary>
        /// Number of satellites visible. If unknown, set to 255
        /// </summary>
        /// <remarks>
        /// gps_nsat
        /// </remarks>
        private byte _gpsNsat;
        
        /// <summary>
        /// See the GPS_FIX_TYPE enum.
        /// </summary>
        /// <remarks>
        /// gps_fix_type
        /// </remarks>
        private GpsFixType _gpsFixType;
        
        /// <summary>
        /// Remaining battery (percentage)
        /// </summary>
        /// <remarks>
        /// battery_remaining
        /// </remarks>
        private byte _batteryRemaining;
        
        /// <summary>
        /// Autopilot temperature (degrees C)
        /// </summary>
        /// <remarks>
        /// temperature
        /// </remarks>
        private sbyte _temperature;
        
        /// <summary>
        /// Air temperature (degrees C) from airspeed sensor
        /// </summary>
        /// <remarks>
        /// temperature_air
        /// </remarks>
        private sbyte _temperatureAir;
        
        /// <summary>
        /// failsafe (each bit represents a failsafe where 0=ok, 1=failsafe active (bit0:RC, bit1:batt, bit2:GPS, bit3:GCS, bit4:fence)
        /// </summary>
        /// <remarks>
        /// failsafe
        /// </remarks>
        private byte _failsafe;
        
        /// <summary>
        /// current waypoint number
        /// </summary>
        /// <remarks>
        /// wp_num
        /// </remarks>
        private byte _wpNum;
        
        /// <summary>
        /// distance to target (meters)
        /// </summary>
        /// <remarks>
        /// wp_distance
        /// </remarks>
        private ushort _wpDistance;
        
        public HighLatencyMessage() : 
                base(MavLink4Net.Messages.MavMessageType.HighLatency, 150)
        {
        }
        
        /// <summary>
        /// System mode bitfield, see MAV_MODE_FLAG ENUM in mavlink/include/mavlink_types.h
        /// </summary>
        [MessageFieldMetadata(Name="base_mode", Type="MAV_MODE_FLAG enum", Display="bitmask", Description="System mode bitfield, see MAV_MODE_FLAG ENUM in mavlink/include/mavlink_types.h")]
        public ModeFlag BaseMode
        {
            get
            {
                return this._baseMode;
            }
            set
            {
                this._baseMode = value;
            }
        }
        
        /// <summary>
        /// A bitfield for use for autopilot-specific flags.
        /// </summary>
        [MessageFieldMetadata(Name="custom_mode", Type="uint32_t", Display="bitmask", Description="A bitfield for use for autopilot-specific flags.")]
        public uint CustomMode
        {
            get
            {
                return this._customMode;
            }
            set
            {
                this._customMode = value;
            }
        }
        
        /// <summary>
        /// The landed state. Is set to MAV_LANDED_STATE_UNDEFINED if landed state is unknown.
        /// </summary>
        [MessageFieldMetadata(Name="landed_state", Type="MAV_LANDED_STATE enum", Description="The landed state. Is set to MAV_LANDED_STATE_UNDEFINED if landed state is unknown" +
            ".")]
        public LandedState LandedState
        {
            get
            {
                return this._landedState;
            }
            set
            {
                this._landedState = value;
            }
        }
        
        /// <summary>
        /// roll (centidegrees)
        /// </summary>
        [MessageFieldMetadata(Name="roll", Type="int16_t", Units="cdeg", Description="roll (centidegrees)")]
        public short Roll
        {
            get
            {
                return this._roll;
            }
            set
            {
                this._roll = value;
            }
        }
        
        /// <summary>
        /// pitch (centidegrees)
        /// </summary>
        [MessageFieldMetadata(Name="pitch", Type="int16_t", Units="cdeg", Description="pitch (centidegrees)")]
        public short Pitch
        {
            get
            {
                return this._pitch;
            }
            set
            {
                this._pitch = value;
            }
        }
        
        /// <summary>
        /// heading (centidegrees)
        /// </summary>
        [MessageFieldMetadata(Name="heading", Type="uint16_t", Units="cdeg", Description="heading (centidegrees)")]
        public ushort Heading
        {
            get
            {
                return this._heading;
            }
            set
            {
                this._heading = value;
            }
        }
        
        /// <summary>
        /// throttle (percentage)
        /// </summary>
        [MessageFieldMetadata(Name="throttle", Type="int8_t", Units="%", Description="throttle (percentage)")]
        public sbyte Throttle
        {
            get
            {
                return this._throttle;
            }
            set
            {
                this._throttle = value;
            }
        }
        
        /// <summary>
        /// heading setpoint (centidegrees)
        /// </summary>
        [MessageFieldMetadata(Name="heading_sp", Type="int16_t", Units="cdeg", Description="heading setpoint (centidegrees)")]
        public short HeadingSp
        {
            get
            {
                return this._headingSp;
            }
            set
            {
                this._headingSp = value;
            }
        }
        
        /// <summary>
        /// Latitude, expressed as degrees * 1E7
        /// </summary>
        [MessageFieldMetadata(Name="latitude", Type="int32_t", Units="degE7", Description="Latitude, expressed as degrees * 1E7")]
        public int Latitude
        {
            get
            {
                return this._latitude;
            }
            set
            {
                this._latitude = value;
            }
        }
        
        /// <summary>
        /// Longitude, expressed as degrees * 1E7
        /// </summary>
        [MessageFieldMetadata(Name="longitude", Type="int32_t", Units="degE7", Description="Longitude, expressed as degrees * 1E7")]
        public int Longitude
        {
            get
            {
                return this._longitude;
            }
            set
            {
                this._longitude = value;
            }
        }
        
        /// <summary>
        /// Altitude above mean sea level (meters)
        /// </summary>
        [MessageFieldMetadata(Name="altitude_amsl", Type="int16_t", Units="m", Description="Altitude above mean sea level (meters)")]
        public short AltitudeAmsl
        {
            get
            {
                return this._altitudeAmsl;
            }
            set
            {
                this._altitudeAmsl = value;
            }
        }
        
        /// <summary>
        /// Altitude setpoint relative to the home position (meters)
        /// </summary>
        [MessageFieldMetadata(Name="altitude_sp", Type="int16_t", Units="m", Description="Altitude setpoint relative to the home position (meters)")]
        public short AltitudeSp
        {
            get
            {
                return this._altitudeSp;
            }
            set
            {
                this._altitudeSp = value;
            }
        }
        
        /// <summary>
        /// airspeed (m/s)
        /// </summary>
        [MessageFieldMetadata(Name="airspeed", Type="uint8_t", Units="m/s", Description="airspeed (m/s)")]
        public byte Airspeed
        {
            get
            {
                return this._airspeed;
            }
            set
            {
                this._airspeed = value;
            }
        }
        
        /// <summary>
        /// airspeed setpoint (m/s)
        /// </summary>
        [MessageFieldMetadata(Name="airspeed_sp", Type="uint8_t", Units="m/s", Description="airspeed setpoint (m/s)")]
        public byte AirspeedSp
        {
            get
            {
                return this._airspeedSp;
            }
            set
            {
                this._airspeedSp = value;
            }
        }
        
        /// <summary>
        /// groundspeed (m/s)
        /// </summary>
        [MessageFieldMetadata(Name="groundspeed", Type="uint8_t", Units="m/s", Description="groundspeed (m/s)")]
        public byte Groundspeed
        {
            get
            {
                return this._groundspeed;
            }
            set
            {
                this._groundspeed = value;
            }
        }
        
        /// <summary>
        /// climb rate (m/s)
        /// </summary>
        [MessageFieldMetadata(Name="climb_rate", Type="int8_t", Units="m/s", Description="climb rate (m/s)")]
        public sbyte ClimbRate
        {
            get
            {
                return this._climbRate;
            }
            set
            {
                this._climbRate = value;
            }
        }
        
        /// <summary>
        /// Number of satellites visible. If unknown, set to 255
        /// </summary>
        [MessageFieldMetadata(Name="gps_nsat", Type="uint8_t", Description="Number of satellites visible. If unknown, set to 255")]
        public byte GpsNsat
        {
            get
            {
                return this._gpsNsat;
            }
            set
            {
                this._gpsNsat = value;
            }
        }
        
        /// <summary>
        /// See the GPS_FIX_TYPE enum.
        /// </summary>
        [MessageFieldMetadata(Name="gps_fix_type", Type="GPS_FIX_TYPE enum", Description="See the GPS_FIX_TYPE enum.")]
        public GpsFixType GpsFixType
        {
            get
            {
                return this._gpsFixType;
            }
            set
            {
                this._gpsFixType = value;
            }
        }
        
        /// <summary>
        /// Remaining battery (percentage)
        /// </summary>
        [MessageFieldMetadata(Name="battery_remaining", Type="uint8_t", Units="%", Description="Remaining battery (percentage)")]
        public byte BatteryRemaining
        {
            get
            {
                return this._batteryRemaining;
            }
            set
            {
                this._batteryRemaining = value;
            }
        }
        
        /// <summary>
        /// Autopilot temperature (degrees C)
        /// </summary>
        [MessageFieldMetadata(Name="temperature", Type="int8_t", Units="degC", Description="Autopilot temperature (degrees C)")]
        public sbyte Temperature
        {
            get
            {
                return this._temperature;
            }
            set
            {
                this._temperature = value;
            }
        }
        
        /// <summary>
        /// Air temperature (degrees C) from airspeed sensor
        /// </summary>
        [MessageFieldMetadata(Name="temperature_air", Type="int8_t", Units="degC", Description="Air temperature (degrees C) from airspeed sensor")]
        public sbyte TemperatureAir
        {
            get
            {
                return this._temperatureAir;
            }
            set
            {
                this._temperatureAir = value;
            }
        }
        
        /// <summary>
        /// failsafe (each bit represents a failsafe where 0=ok, 1=failsafe active (bit0:RC, bit1:batt, bit2:GPS, bit3:GCS, bit4:fence)
        /// </summary>
        [MessageFieldMetadata(Name="failsafe", Type="uint8_t", Description="failsafe (each bit represents a failsafe where 0=ok, 1=failsafe active (bit0:RC, " +
            "bit1:batt, bit2:GPS, bit3:GCS, bit4:fence)")]
        public byte Failsafe
        {
            get
            {
                return this._failsafe;
            }
            set
            {
                this._failsafe = value;
            }
        }
        
        /// <summary>
        /// current waypoint number
        /// </summary>
        [MessageFieldMetadata(Name="wp_num", Type="uint8_t", Description="current waypoint number")]
        public byte WpNum
        {
            get
            {
                return this._wpNum;
            }
            set
            {
                this._wpNum = value;
            }
        }
        
        /// <summary>
        /// distance to target (meters)
        /// </summary>
        [MessageFieldMetadata(Name="wp_distance", Type="uint16_t", Units="m", Description="distance to target (meters)")]
        public ushort WpDistance
        {
            get
            {
                return this._wpDistance;
            }
            set
            {
                this._wpDistance = value;
            }
        }
    }
}
