//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.42000
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;


namespace MavLink4Net.Messages.Common
{
    
    
    /// <summary>
    /// The autopilot is requesting a resource (file, binary, other type of data)
    /// </summary>
    /// <remarks>
    /// RESOURCE_REQUEST
    /// </remarks>
    public class ResourceRequestMessage : MavLink4Net.Messages.Message
    {
        
        /// <summary>
        /// Request ID. This ID should be re-used when sending back URI contents
        /// </summary>
        /// <remarks>
        /// request_id
        /// </remarks>
        private byte _requestId;
        
        /// <summary>
        /// The type of requested URI. 0 = a file via URL. 1 = a UAVCAN binary
        /// </summary>
        /// <remarks>
        /// uri_type
        /// </remarks>
        private byte _uriType;
        
        /// <summary>
        /// The requested unique resource identifier (URI). It is not necessarily a straight domain name (depends on the URI type enum)
        /// </summary>
        /// <remarks>
        /// uri
        /// </remarks>
        private byte[] _uri = new byte[120];
        
        /// <summary>
        /// The way the autopilot wants to receive the URI. 0 = MAVLink FTP. 1 = binary stream.
        /// </summary>
        /// <remarks>
        /// transfer_type
        /// </remarks>
        private byte _transferType;
        
        /// <summary>
        /// The storage path the autopilot wants the URI to be stored in. Will only be valid if the transfer_type has a storage associated (e.g. MAVLink FTP).
        /// </summary>
        /// <remarks>
        /// storage
        /// </remarks>
        private byte[] _storage = new byte[120];
        
        public ResourceRequestMessage() : 
                base(MavLink4Net.Messages.MavMessageType.ResourceRequest, 72)
        {
        }
        
        /// <summary>
        /// Request ID. This ID should be re-used when sending back URI contents
        /// </summary>
        public byte RequestId
        {
            get
            {
                return this._requestId;
            }
            set
            {
                this._requestId = value;
            }
        }
        
        /// <summary>
        /// The type of requested URI. 0 = a file via URL. 1 = a UAVCAN binary
        /// </summary>
        public byte UriType
        {
            get
            {
                return this._uriType;
            }
            set
            {
                this._uriType = value;
            }
        }
        
        /// <summary>
        /// The requested unique resource identifier (URI). It is not necessarily a straight domain name (depends on the URI type enum)
        /// </summary>
        public byte[] Uri
        {
            get
            {
                return this._uri;
            }
            set
            {
                this._uri = value;
            }
        }
        
        /// <summary>
        /// The way the autopilot wants to receive the URI. 0 = MAVLink FTP. 1 = binary stream.
        /// </summary>
        public byte TransferType
        {
            get
            {
                return this._transferType;
            }
            set
            {
                this._transferType = value;
            }
        }
        
        /// <summary>
        /// The storage path the autopilot wants the URI to be stored in. Will only be valid if the transfer_type has a storage associated (e.g. MAVLink FTP).
        /// </summary>
        public byte[] Storage
        {
            get
            {
                return this._storage;
            }
            set
            {
                this._storage = value;
            }
        }
    }
}
