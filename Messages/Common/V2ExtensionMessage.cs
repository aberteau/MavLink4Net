//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.42000
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

using MavLink4Net.Messages.Metadata;
using System;
using System.ComponentModel;


namespace MavLink4Net.Messages.Common
{
    
    
    /// <summary>
    /// Message implementing parts of the V2 payload specs in V1 frames for transitional support.
    /// </summary>
    /// <remarks>
    /// V2_EXTENSION
    /// </remarks>
    [MessageMetadata(Type=MavLink4Net.Messages.MavMessageType.V2Extension, Name="V2_EXTENSION", Description="Message implementing parts of the V2 payload specs in V1 frames for transitional " +
        "support.")]
    public class V2ExtensionMessage : MavLink4Net.Messages.Message
    {
        
        /// <summary>
        /// Network ID (0 for broadcast)
        /// </summary>
        /// <remarks>
        /// target_network
        /// </remarks>
        private byte _targetNetwork;
        
        /// <summary>
        /// System ID (0 for broadcast)
        /// </summary>
        /// <remarks>
        /// target_system
        /// </remarks>
        private byte _targetSystem;
        
        /// <summary>
        /// Component ID (0 for broadcast)
        /// </summary>
        /// <remarks>
        /// target_component
        /// </remarks>
        private byte _targetComponent;
        
        /// <summary>
        /// A code that identifies the software component that understands this message (analogous to usb device classes or mime type strings).  If this code is less than 32768, it is considered a 'registered' protocol extension and the corresponding entry should be added to https://github.com/mavlink/mavlink/extension-message-ids.xml.  Software creators can register blocks of message IDs as needed (useful for GCS specific metadata, etc...). Message_types greater than 32767 are considered local experiments and should not be checked in to any widely distributed codebase.
        /// </summary>
        /// <remarks>
        /// message_type
        /// </remarks>
        private ushort _messageType;
        
        /// <summary>
        /// Variable length payload. The length is defined by the remaining message length when subtracting the header and other fields.  The entire content of this block is opaque unless you understand any the encoding message_type.  The particular encoding used can be extension specific and might not always be documented as part of the mavlink specification.
        /// </summary>
        /// <remarks>
        /// payload
        /// </remarks>
        private byte[] _payload = new byte[249];
        
        public V2ExtensionMessage() : 
                base(MavLink4Net.Messages.MavMessageType.V2Extension)
        {
        }
        
        /// <summary>
        /// Network ID (0 for broadcast)
        /// </summary>
        [MessageFieldMetadata(Name="target_network", Type="uint8_t", Description="Network ID (0 for broadcast)")]
        public byte TargetNetwork
        {
            get
            {
                return this._targetNetwork;
            }
            set
            {
                this._targetNetwork = value;
            }
        }
        
        /// <summary>
        /// System ID (0 for broadcast)
        /// </summary>
        [MessageFieldMetadata(Name="target_system", Type="uint8_t", Description="System ID (0 for broadcast)")]
        public byte TargetSystem
        {
            get
            {
                return this._targetSystem;
            }
            set
            {
                this._targetSystem = value;
            }
        }
        
        /// <summary>
        /// Component ID (0 for broadcast)
        /// </summary>
        [MessageFieldMetadata(Name="target_component", Type="uint8_t", Description="Component ID (0 for broadcast)")]
        public byte TargetComponent
        {
            get
            {
                return this._targetComponent;
            }
            set
            {
                this._targetComponent = value;
            }
        }
        
        /// <summary>
        /// A code that identifies the software component that understands this message (analogous to usb device classes or mime type strings).  If this code is less than 32768, it is considered a 'registered' protocol extension and the corresponding entry should be added to https://github.com/mavlink/mavlink/extension-message-ids.xml.  Software creators can register blocks of message IDs as needed (useful for GCS specific metadata, etc...). Message_types greater than 32767 are considered local experiments and should not be checked in to any widely distributed codebase.
        /// </summary>
        [MessageFieldMetadata(Name="message_type", Type="uint16_t", Description=@"A code that identifies the software component that understands this message (analogous to usb device classes or mime type strings).  If this code is less than 32768, it is considered a 'registered' protocol extension and the corresponding entry should be added to https://github.com/mavlink/mavlink/extension-message-ids.xml.  Software creators can register blocks of message IDs as needed (useful for GCS specific metadata, etc...). Message_types greater than 32767 are considered local experiments and should not be checked in to any widely distributed codebase.")]
        public ushort MessageType
        {
            get
            {
                return this._messageType;
            }
            set
            {
                this._messageType = value;
            }
        }
        
        /// <summary>
        /// Variable length payload. The length is defined by the remaining message length when subtracting the header and other fields.  The entire content of this block is opaque unless you understand any the encoding message_type.  The particular encoding used can be extension specific and might not always be documented as part of the mavlink specification.
        /// </summary>
        [MessageFieldMetadata(Name="payload", Type="uint8_t[249]", Description=@"Variable length payload. The length is defined by the remaining message length when subtracting the header and other fields.  The entire content of this block is opaque unless you understand any the encoding message_type.  The particular encoding used can be extension specific and might not always be documented as part of the mavlink specification.")]
        public byte[] Payload
        {
            get
            {
                return this._payload;
            }
            set
            {
                this._payload = value;
            }
        }
    }
}
