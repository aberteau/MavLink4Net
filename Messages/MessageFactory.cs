//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.42000
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------


namespace MavLink4Net.Messages
{
    
    
    public class MessageFactory
    {
        
        public static IMessage CreateMessage(MavLink4Net.Messages.MavMessageType mavType)
        {
            if ((mavType == MavLink4Net.Messages.MavMessageType.Heartbeat))
            {
                return new MavLink4Net.Messages.Common.HeartbeatMessage();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.SysStatus))
            {
                return new MavLink4Net.Messages.Common.SysStatusMessage();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.SystemTime))
            {
                return new MavLink4Net.Messages.Common.SystemTimeMessage();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.Ping))
            {
                return new MavLink4Net.Messages.Common.PingMessage();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.ChangeOperatorControl))
            {
                return new MavLink4Net.Messages.Common.ChangeOperatorControlMessage();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.ChangeOperatorControlAck))
            {
                return new MavLink4Net.Messages.Common.ChangeOperatorControlAckMessage();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.AuthKey))
            {
                return new MavLink4Net.Messages.Common.AuthKeyMessage();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.SetMode))
            {
                return new MavLink4Net.Messages.Common.SetModeMessage();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.ParamRequestRead))
            {
                return new MavLink4Net.Messages.Common.ParamRequestReadMessage();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.ParamRequestList))
            {
                return new MavLink4Net.Messages.Common.ParamRequestListMessage();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.ParamValue))
            {
                return new MavLink4Net.Messages.Common.ParamValueMessage();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.ParamSet))
            {
                return new MavLink4Net.Messages.Common.ParamSetMessage();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.GpsRawInt))
            {
                return new MavLink4Net.Messages.Common.GpsRawIntMessage();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.GpsStatus))
            {
                return new MavLink4Net.Messages.Common.GpsStatusMessage();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.ScaledImu))
            {
                return new MavLink4Net.Messages.Common.ScaledImuMessage();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.RawImu))
            {
                return new MavLink4Net.Messages.Common.RawImuMessage();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.RawPressure))
            {
                return new MavLink4Net.Messages.Common.RawPressureMessage();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.ScaledPressure))
            {
                return new MavLink4Net.Messages.Common.ScaledPressureMessage();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.Attitude))
            {
                return new MavLink4Net.Messages.Common.AttitudeMessage();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.AttitudeQuaternion))
            {
                return new MavLink4Net.Messages.Common.AttitudeQuaternionMessage();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.LocalPositionNed))
            {
                return new MavLink4Net.Messages.Common.LocalPositionNedMessage();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.GlobalPositionInt))
            {
                return new MavLink4Net.Messages.Common.GlobalPositionIntMessage();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.RcChannelsScaled))
            {
                return new MavLink4Net.Messages.Common.RcChannelsScaledMessage();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.RcChannelsRaw))
            {
                return new MavLink4Net.Messages.Common.RcChannelsRawMessage();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.ServoOutputRaw))
            {
                return new MavLink4Net.Messages.Common.ServoOutputRawMessage();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.MissionRequestPartialList))
            {
                return new MavLink4Net.Messages.Common.MissionRequestPartialListMessage();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.MissionWritePartialList))
            {
                return new MavLink4Net.Messages.Common.MissionWritePartialListMessage();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.MissionItem))
            {
                return new MavLink4Net.Messages.Common.MissionItemMessage();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.MissionRequest))
            {
                return new MavLink4Net.Messages.Common.MissionRequestMessage();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.MissionSetCurrent))
            {
                return new MavLink4Net.Messages.Common.MissionSetCurrentMessage();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.MissionCurrent))
            {
                return new MavLink4Net.Messages.Common.MissionCurrentMessage();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.MissionRequestList))
            {
                return new MavLink4Net.Messages.Common.MissionRequestListMessage();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.MissionCount))
            {
                return new MavLink4Net.Messages.Common.MissionCountMessage();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.MissionClearAll))
            {
                return new MavLink4Net.Messages.Common.MissionClearAllMessage();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.MissionItemReached))
            {
                return new MavLink4Net.Messages.Common.MissionItemReachedMessage();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.MissionAck))
            {
                return new MavLink4Net.Messages.Common.MissionAckMessage();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.SetGpsGlobalOrigin))
            {
                return new MavLink4Net.Messages.Common.SetGpsGlobalOriginMessage();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.GpsGlobalOrigin))
            {
                return new MavLink4Net.Messages.Common.GpsGlobalOriginMessage();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.ParamMapRc))
            {
                return new MavLink4Net.Messages.Common.ParamMapRcMessage();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.MissionRequestInt))
            {
                return new MavLink4Net.Messages.Common.MissionRequestIntMessage();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.SafetySetAllowedArea))
            {
                return new MavLink4Net.Messages.Common.SafetySetAllowedAreaMessage();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.SafetyAllowedArea))
            {
                return new MavLink4Net.Messages.Common.SafetyAllowedAreaMessage();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.AttitudeQuaternionCov))
            {
                return new MavLink4Net.Messages.Common.AttitudeQuaternionCovMessage();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.NavControllerOutput))
            {
                return new MavLink4Net.Messages.Common.NavControllerOutputMessage();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.GlobalPositionIntCov))
            {
                return new MavLink4Net.Messages.Common.GlobalPositionIntCovMessage();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.LocalPositionNedCov))
            {
                return new MavLink4Net.Messages.Common.LocalPositionNedCovMessage();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.RcChannels))
            {
                return new MavLink4Net.Messages.Common.RcChannelsMessage();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.RequestDataStream))
            {
                return new MavLink4Net.Messages.Common.RequestDataStreamMessage();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.DataStream))
            {
                return new MavLink4Net.Messages.Common.DataStreamMessage();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.ManualControl))
            {
                return new MavLink4Net.Messages.Common.ManualControlMessage();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.RcChannelsOverride))
            {
                return new MavLink4Net.Messages.Common.RcChannelsOverrideMessage();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.MissionItemInt))
            {
                return new MavLink4Net.Messages.Common.MissionItemIntMessage();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.VfrHud))
            {
                return new MavLink4Net.Messages.Common.VfrHudMessage();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.CommandInt))
            {
                return new MavLink4Net.Messages.Common.CommandIntMessage();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.CommandLong))
            {
                return new MavLink4Net.Messages.Common.CommandLongMessage();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.CommandAck))
            {
                return new MavLink4Net.Messages.Common.CommandAckMessage();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.ManualSetpoint))
            {
                return new MavLink4Net.Messages.Common.ManualSetpointMessage();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.SetAttitudeTarget))
            {
                return new MavLink4Net.Messages.Common.SetAttitudeTargetMessage();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.AttitudeTarget))
            {
                return new MavLink4Net.Messages.Common.AttitudeTargetMessage();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.SetPositionTargetLocalNed))
            {
                return new MavLink4Net.Messages.Common.SetPositionTargetLocalNedMessage();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.PositionTargetLocalNed))
            {
                return new MavLink4Net.Messages.Common.PositionTargetLocalNedMessage();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.SetPositionTargetGlobalInt))
            {
                return new MavLink4Net.Messages.Common.SetPositionTargetGlobalIntMessage();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.PositionTargetGlobalInt))
            {
                return new MavLink4Net.Messages.Common.PositionTargetGlobalIntMessage();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.LocalPositionNedSystemGlobalOffset))
            {
                return new MavLink4Net.Messages.Common.LocalPositionNedSystemGlobalOffsetMessage();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.HilState))
            {
                return new MavLink4Net.Messages.Common.HilStateMessage();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.HilControls))
            {
                return new MavLink4Net.Messages.Common.HilControlsMessage();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.HilRcInputsRaw))
            {
                return new MavLink4Net.Messages.Common.HilRcInputsRawMessage();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.HilActuatorControls))
            {
                return new MavLink4Net.Messages.Common.HilActuatorControlsMessage();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.OpticalFlow))
            {
                return new MavLink4Net.Messages.Common.OpticalFlowMessage();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.GlobalVisionPositionEstimate))
            {
                return new MavLink4Net.Messages.Common.GlobalVisionPositionEstimateMessage();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.VisionPositionEstimate))
            {
                return new MavLink4Net.Messages.Common.VisionPositionEstimateMessage();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.VisionSpeedEstimate))
            {
                return new MavLink4Net.Messages.Common.VisionSpeedEstimateMessage();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.ViconPositionEstimate))
            {
                return new MavLink4Net.Messages.Common.ViconPositionEstimateMessage();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.HighresImu))
            {
                return new MavLink4Net.Messages.Common.HighresImuMessage();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.OpticalFlowRad))
            {
                return new MavLink4Net.Messages.Common.OpticalFlowRadMessage();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.HilSensor))
            {
                return new MavLink4Net.Messages.Common.HilSensorMessage();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.SimState))
            {
                return new MavLink4Net.Messages.Common.SimStateMessage();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.RadioStatus))
            {
                return new MavLink4Net.Messages.Common.RadioStatusMessage();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.FileTransferProtocol))
            {
                return new MavLink4Net.Messages.Common.FileTransferProtocolMessage();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.Timesync))
            {
                return new MavLink4Net.Messages.Common.TimesyncMessage();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.CameraTrigger))
            {
                return new MavLink4Net.Messages.Common.CameraTriggerMessage();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.HilGps))
            {
                return new MavLink4Net.Messages.Common.HilGpsMessage();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.HilOpticalFlow))
            {
                return new MavLink4Net.Messages.Common.HilOpticalFlowMessage();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.HilStateQuaternion))
            {
                return new MavLink4Net.Messages.Common.HilStateQuaternionMessage();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.ScaledImu2))
            {
                return new MavLink4Net.Messages.Common.ScaledImu2Message();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.LogRequestList))
            {
                return new MavLink4Net.Messages.Common.LogRequestListMessage();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.LogEntry))
            {
                return new MavLink4Net.Messages.Common.LogEntryMessage();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.LogRequestData))
            {
                return new MavLink4Net.Messages.Common.LogRequestDataMessage();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.LogData))
            {
                return new MavLink4Net.Messages.Common.LogDataMessage();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.LogErase))
            {
                return new MavLink4Net.Messages.Common.LogEraseMessage();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.LogRequestEnd))
            {
                return new MavLink4Net.Messages.Common.LogRequestEndMessage();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.GpsInjectData))
            {
                return new MavLink4Net.Messages.Common.GpsInjectDataMessage();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.Gps2Raw))
            {
                return new MavLink4Net.Messages.Common.Gps2RawMessage();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.PowerStatus))
            {
                return new MavLink4Net.Messages.Common.PowerStatusMessage();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.SerialControl))
            {
                return new MavLink4Net.Messages.Common.SerialControlMessage();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.GpsRtk))
            {
                return new MavLink4Net.Messages.Common.GpsRtkMessage();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.Gps2Rtk))
            {
                return new MavLink4Net.Messages.Common.Gps2RtkMessage();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.ScaledImu3))
            {
                return new MavLink4Net.Messages.Common.ScaledImu3Message();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.DataTransmissionHandshake))
            {
                return new MavLink4Net.Messages.Common.DataTransmissionHandshakeMessage();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.EncapsulatedData))
            {
                return new MavLink4Net.Messages.Common.EncapsulatedDataMessage();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.DistanceSensor))
            {
                return new MavLink4Net.Messages.Common.DistanceSensorMessage();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.TerrainRequest))
            {
                return new MavLink4Net.Messages.Common.TerrainRequestMessage();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.TerrainData))
            {
                return new MavLink4Net.Messages.Common.TerrainDataMessage();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.TerrainCheck))
            {
                return new MavLink4Net.Messages.Common.TerrainCheckMessage();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.TerrainReport))
            {
                return new MavLink4Net.Messages.Common.TerrainReportMessage();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.ScaledPressure2))
            {
                return new MavLink4Net.Messages.Common.ScaledPressure2Message();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.AttPosMocap))
            {
                return new MavLink4Net.Messages.Common.AttPosMocapMessage();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.SetActuatorControlTarget))
            {
                return new MavLink4Net.Messages.Common.SetActuatorControlTargetMessage();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.ActuatorControlTarget))
            {
                return new MavLink4Net.Messages.Common.ActuatorControlTargetMessage();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.Altitude))
            {
                return new MavLink4Net.Messages.Common.AltitudeMessage();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.ResourceRequest))
            {
                return new MavLink4Net.Messages.Common.ResourceRequestMessage();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.ScaledPressure3))
            {
                return new MavLink4Net.Messages.Common.ScaledPressure3Message();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.FollowTarget))
            {
                return new MavLink4Net.Messages.Common.FollowTargetMessage();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.ControlSystemState))
            {
                return new MavLink4Net.Messages.Common.ControlSystemStateMessage();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.BatteryStatus))
            {
                return new MavLink4Net.Messages.Common.BatteryStatusMessage();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.AutopilotVersion))
            {
                return new MavLink4Net.Messages.Common.AutopilotVersionMessage();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.LandingTarget))
            {
                return new MavLink4Net.Messages.Common.LandingTargetMessage();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.EstimatorStatus))
            {
                return new MavLink4Net.Messages.Common.EstimatorStatusMessage();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.WindCov))
            {
                return new MavLink4Net.Messages.Common.WindCovMessage();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.GpsInput))
            {
                return new MavLink4Net.Messages.Common.GpsInputMessage();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.GpsRtcmData))
            {
                return new MavLink4Net.Messages.Common.GpsRtcmDataMessage();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.HighLatency))
            {
                return new MavLink4Net.Messages.Common.HighLatencyMessage();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.HighLatency2))
            {
                return new MavLink4Net.Messages.Common.HighLatency2Message();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.Vibration))
            {
                return new MavLink4Net.Messages.Common.VibrationMessage();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.HomePosition))
            {
                return new MavLink4Net.Messages.Common.HomePositionMessage();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.SetHomePosition))
            {
                return new MavLink4Net.Messages.Common.SetHomePositionMessage();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.MessageInterval))
            {
                return new MavLink4Net.Messages.Common.MessageIntervalMessage();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.ExtendedSysState))
            {
                return new MavLink4Net.Messages.Common.ExtendedSysStateMessage();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.AdsbVehicle))
            {
                return new MavLink4Net.Messages.Common.AdsbVehicleMessage();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.Collision))
            {
                return new MavLink4Net.Messages.Common.CollisionMessage();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.V2Extension))
            {
                return new MavLink4Net.Messages.Common.V2ExtensionMessage();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.MemoryVect))
            {
                return new MavLink4Net.Messages.Common.MemoryVectMessage();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.DebugVect))
            {
                return new MavLink4Net.Messages.Common.DebugVectMessage();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.NamedValueFloat))
            {
                return new MavLink4Net.Messages.Common.NamedValueFloatMessage();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.NamedValueInt))
            {
                return new MavLink4Net.Messages.Common.NamedValueIntMessage();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.Statustext))
            {
                return new MavLink4Net.Messages.Common.StatustextMessage();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.Debug))
            {
                return new MavLink4Net.Messages.Common.DebugMessage();
            }
            return null;
        }
    }
}
