//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.42000
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;


namespace MavLink4Net.Messages.Serialization
{
    
    
    public class MessageSerializerFactory
    {
        
        public static IMessageSerializer CreateSerializer(MavLink4Net.Messages.MavMessageType mavType)
        {
            if ((mavType == MavLink4Net.Messages.MavMessageType.Heartbeat))
            {
                return new MavLink4Net.Messages.Serialization.Common.HeartbeatMessageSerializer();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.SysStatus))
            {
                return new MavLink4Net.Messages.Serialization.Common.SysStatusMessageSerializer();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.SystemTime))
            {
                return new MavLink4Net.Messages.Serialization.Common.SystemTimeMessageSerializer();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.Ping))
            {
                return new MavLink4Net.Messages.Serialization.Common.PingMessageSerializer();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.ChangeOperatorControl))
            {
                return new MavLink4Net.Messages.Serialization.Common.ChangeOperatorControlMessageSerializer();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.ChangeOperatorControlAck))
            {
                return new MavLink4Net.Messages.Serialization.Common.ChangeOperatorControlAckMessageSerializer();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.AuthKey))
            {
                return new MavLink4Net.Messages.Serialization.Common.AuthKeyMessageSerializer();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.SetMode))
            {
                return new MavLink4Net.Messages.Serialization.Common.SetModeMessageSerializer();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.ParamRequestRead))
            {
                return new MavLink4Net.Messages.Serialization.Common.ParamRequestReadMessageSerializer();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.ParamRequestList))
            {
                return new MavLink4Net.Messages.Serialization.Common.ParamRequestListMessageSerializer();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.ParamValue))
            {
                return new MavLink4Net.Messages.Serialization.Common.ParamValueMessageSerializer();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.ParamSet))
            {
                return new MavLink4Net.Messages.Serialization.Common.ParamSetMessageSerializer();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.GpsRawInt))
            {
                return new MavLink4Net.Messages.Serialization.Common.GpsRawIntMessageSerializer();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.GpsStatus))
            {
                return new MavLink4Net.Messages.Serialization.Common.GpsStatusMessageSerializer();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.ScaledImu))
            {
                return new MavLink4Net.Messages.Serialization.Common.ScaledImuMessageSerializer();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.RawImu))
            {
                return new MavLink4Net.Messages.Serialization.Common.RawImuMessageSerializer();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.RawPressure))
            {
                return new MavLink4Net.Messages.Serialization.Common.RawPressureMessageSerializer();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.ScaledPressure))
            {
                return new MavLink4Net.Messages.Serialization.Common.ScaledPressureMessageSerializer();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.Attitude))
            {
                return new MavLink4Net.Messages.Serialization.Common.AttitudeMessageSerializer();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.AttitudeQuaternion))
            {
                return new MavLink4Net.Messages.Serialization.Common.AttitudeQuaternionMessageSerializer();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.LocalPositionNed))
            {
                return new MavLink4Net.Messages.Serialization.Common.LocalPositionNedMessageSerializer();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.GlobalPositionInt))
            {
                return new MavLink4Net.Messages.Serialization.Common.GlobalPositionIntMessageSerializer();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.RcChannelsScaled))
            {
                return new MavLink4Net.Messages.Serialization.Common.RcChannelsScaledMessageSerializer();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.RcChannelsRaw))
            {
                return new MavLink4Net.Messages.Serialization.Common.RcChannelsRawMessageSerializer();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.ServoOutputRaw))
            {
                return new MavLink4Net.Messages.Serialization.Common.ServoOutputRawMessageSerializer();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.MissionRequestPartialList))
            {
                return new MavLink4Net.Messages.Serialization.Common.MissionRequestPartialListMessageSerializer();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.MissionWritePartialList))
            {
                return new MavLink4Net.Messages.Serialization.Common.MissionWritePartialListMessageSerializer();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.MissionItem))
            {
                return new MavLink4Net.Messages.Serialization.Common.MissionItemMessageSerializer();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.MissionRequest))
            {
                return new MavLink4Net.Messages.Serialization.Common.MissionRequestMessageSerializer();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.MissionSetCurrent))
            {
                return new MavLink4Net.Messages.Serialization.Common.MissionSetCurrentMessageSerializer();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.MissionCurrent))
            {
                return new MavLink4Net.Messages.Serialization.Common.MissionCurrentMessageSerializer();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.MissionRequestList))
            {
                return new MavLink4Net.Messages.Serialization.Common.MissionRequestListMessageSerializer();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.MissionCount))
            {
                return new MavLink4Net.Messages.Serialization.Common.MissionCountMessageSerializer();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.MissionClearAll))
            {
                return new MavLink4Net.Messages.Serialization.Common.MissionClearAllMessageSerializer();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.MissionItemReached))
            {
                return new MavLink4Net.Messages.Serialization.Common.MissionItemReachedMessageSerializer();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.MissionAck))
            {
                return new MavLink4Net.Messages.Serialization.Common.MissionAckMessageSerializer();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.SetGpsGlobalOrigin))
            {
                return new MavLink4Net.Messages.Serialization.Common.SetGpsGlobalOriginMessageSerializer();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.GpsGlobalOrigin))
            {
                return new MavLink4Net.Messages.Serialization.Common.GpsGlobalOriginMessageSerializer();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.ParamMapRc))
            {
                return new MavLink4Net.Messages.Serialization.Common.ParamMapRcMessageSerializer();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.MissionRequestInt))
            {
                return new MavLink4Net.Messages.Serialization.Common.MissionRequestIntMessageSerializer();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.SafetySetAllowedArea))
            {
                return new MavLink4Net.Messages.Serialization.Common.SafetySetAllowedAreaMessageSerializer();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.SafetyAllowedArea))
            {
                return new MavLink4Net.Messages.Serialization.Common.SafetyAllowedAreaMessageSerializer();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.AttitudeQuaternionCov))
            {
                return new MavLink4Net.Messages.Serialization.Common.AttitudeQuaternionCovMessageSerializer();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.NavControllerOutput))
            {
                return new MavLink4Net.Messages.Serialization.Common.NavControllerOutputMessageSerializer();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.GlobalPositionIntCov))
            {
                return new MavLink4Net.Messages.Serialization.Common.GlobalPositionIntCovMessageSerializer();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.LocalPositionNedCov))
            {
                return new MavLink4Net.Messages.Serialization.Common.LocalPositionNedCovMessageSerializer();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.RcChannels))
            {
                return new MavLink4Net.Messages.Serialization.Common.RcChannelsMessageSerializer();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.RequestDataStream))
            {
                return new MavLink4Net.Messages.Serialization.Common.RequestDataStreamMessageSerializer();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.DataStream))
            {
                return new MavLink4Net.Messages.Serialization.Common.DataStreamMessageSerializer();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.ManualControl))
            {
                return new MavLink4Net.Messages.Serialization.Common.ManualControlMessageSerializer();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.RcChannelsOverride))
            {
                return new MavLink4Net.Messages.Serialization.Common.RcChannelsOverrideMessageSerializer();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.MissionItemInt))
            {
                return new MavLink4Net.Messages.Serialization.Common.MissionItemIntMessageSerializer();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.VfrHud))
            {
                return new MavLink4Net.Messages.Serialization.Common.VfrHudMessageSerializer();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.CommandInt))
            {
                return new MavLink4Net.Messages.Serialization.Common.CommandIntMessageSerializer();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.CommandLong))
            {
                return new MavLink4Net.Messages.Serialization.Common.CommandLongMessageSerializer();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.CommandAck))
            {
                return new MavLink4Net.Messages.Serialization.Common.CommandAckMessageSerializer();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.ManualSetpoint))
            {
                return new MavLink4Net.Messages.Serialization.Common.ManualSetpointMessageSerializer();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.SetAttitudeTarget))
            {
                return new MavLink4Net.Messages.Serialization.Common.SetAttitudeTargetMessageSerializer();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.AttitudeTarget))
            {
                return new MavLink4Net.Messages.Serialization.Common.AttitudeTargetMessageSerializer();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.SetPositionTargetLocalNed))
            {
                return new MavLink4Net.Messages.Serialization.Common.SetPositionTargetLocalNedMessageSerializer();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.PositionTargetLocalNed))
            {
                return new MavLink4Net.Messages.Serialization.Common.PositionTargetLocalNedMessageSerializer();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.SetPositionTargetGlobalInt))
            {
                return new MavLink4Net.Messages.Serialization.Common.SetPositionTargetGlobalIntMessageSerializer();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.PositionTargetGlobalInt))
            {
                return new MavLink4Net.Messages.Serialization.Common.PositionTargetGlobalIntMessageSerializer();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.LocalPositionNedSystemGlobalOffset))
            {
                return new MavLink4Net.Messages.Serialization.Common.LocalPositionNedSystemGlobalOffsetMessageSerializer();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.HilState))
            {
                return new MavLink4Net.Messages.Serialization.Common.HilStateMessageSerializer();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.HilControls))
            {
                return new MavLink4Net.Messages.Serialization.Common.HilControlsMessageSerializer();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.HilRcInputsRaw))
            {
                return new MavLink4Net.Messages.Serialization.Common.HilRcInputsRawMessageSerializer();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.HilActuatorControls))
            {
                return new MavLink4Net.Messages.Serialization.Common.HilActuatorControlsMessageSerializer();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.OpticalFlow))
            {
                return new MavLink4Net.Messages.Serialization.Common.OpticalFlowMessageSerializer();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.GlobalVisionPositionEstimate))
            {
                return new MavLink4Net.Messages.Serialization.Common.GlobalVisionPositionEstimateMessageSerializer();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.VisionPositionEstimate))
            {
                return new MavLink4Net.Messages.Serialization.Common.VisionPositionEstimateMessageSerializer();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.VisionSpeedEstimate))
            {
                return new MavLink4Net.Messages.Serialization.Common.VisionSpeedEstimateMessageSerializer();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.ViconPositionEstimate))
            {
                return new MavLink4Net.Messages.Serialization.Common.ViconPositionEstimateMessageSerializer();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.HighresImu))
            {
                return new MavLink4Net.Messages.Serialization.Common.HighresImuMessageSerializer();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.OpticalFlowRad))
            {
                return new MavLink4Net.Messages.Serialization.Common.OpticalFlowRadMessageSerializer();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.HilSensor))
            {
                return new MavLink4Net.Messages.Serialization.Common.HilSensorMessageSerializer();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.SimState))
            {
                return new MavLink4Net.Messages.Serialization.Common.SimStateMessageSerializer();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.RadioStatus))
            {
                return new MavLink4Net.Messages.Serialization.Common.RadioStatusMessageSerializer();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.FileTransferProtocol))
            {
                return new MavLink4Net.Messages.Serialization.Common.FileTransferProtocolMessageSerializer();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.Timesync))
            {
                return new MavLink4Net.Messages.Serialization.Common.TimesyncMessageSerializer();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.CameraTrigger))
            {
                return new MavLink4Net.Messages.Serialization.Common.CameraTriggerMessageSerializer();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.HilGps))
            {
                return new MavLink4Net.Messages.Serialization.Common.HilGpsMessageSerializer();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.HilOpticalFlow))
            {
                return new MavLink4Net.Messages.Serialization.Common.HilOpticalFlowMessageSerializer();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.HilStateQuaternion))
            {
                return new MavLink4Net.Messages.Serialization.Common.HilStateQuaternionMessageSerializer();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.ScaledImu2))
            {
                return new MavLink4Net.Messages.Serialization.Common.ScaledImu2MessageSerializer();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.LogRequestList))
            {
                return new MavLink4Net.Messages.Serialization.Common.LogRequestListMessageSerializer();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.LogEntry))
            {
                return new MavLink4Net.Messages.Serialization.Common.LogEntryMessageSerializer();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.LogRequestData))
            {
                return new MavLink4Net.Messages.Serialization.Common.LogRequestDataMessageSerializer();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.LogData))
            {
                return new MavLink4Net.Messages.Serialization.Common.LogDataMessageSerializer();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.LogErase))
            {
                return new MavLink4Net.Messages.Serialization.Common.LogEraseMessageSerializer();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.LogRequestEnd))
            {
                return new MavLink4Net.Messages.Serialization.Common.LogRequestEndMessageSerializer();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.GpsInjectData))
            {
                return new MavLink4Net.Messages.Serialization.Common.GpsInjectDataMessageSerializer();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.Gps2Raw))
            {
                return new MavLink4Net.Messages.Serialization.Common.Gps2RawMessageSerializer();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.PowerStatus))
            {
                return new MavLink4Net.Messages.Serialization.Common.PowerStatusMessageSerializer();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.SerialControl))
            {
                return new MavLink4Net.Messages.Serialization.Common.SerialControlMessageSerializer();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.GpsRtk))
            {
                return new MavLink4Net.Messages.Serialization.Common.GpsRtkMessageSerializer();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.Gps2Rtk))
            {
                return new MavLink4Net.Messages.Serialization.Common.Gps2RtkMessageSerializer();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.ScaledImu3))
            {
                return new MavLink4Net.Messages.Serialization.Common.ScaledImu3MessageSerializer();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.DataTransmissionHandshake))
            {
                return new MavLink4Net.Messages.Serialization.Common.DataTransmissionHandshakeMessageSerializer();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.EncapsulatedData))
            {
                return new MavLink4Net.Messages.Serialization.Common.EncapsulatedDataMessageSerializer();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.DistanceSensor))
            {
                return new MavLink4Net.Messages.Serialization.Common.DistanceSensorMessageSerializer();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.TerrainRequest))
            {
                return new MavLink4Net.Messages.Serialization.Common.TerrainRequestMessageSerializer();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.TerrainData))
            {
                return new MavLink4Net.Messages.Serialization.Common.TerrainDataMessageSerializer();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.TerrainCheck))
            {
                return new MavLink4Net.Messages.Serialization.Common.TerrainCheckMessageSerializer();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.TerrainReport))
            {
                return new MavLink4Net.Messages.Serialization.Common.TerrainReportMessageSerializer();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.ScaledPressure2))
            {
                return new MavLink4Net.Messages.Serialization.Common.ScaledPressure2MessageSerializer();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.AttPosMocap))
            {
                return new MavLink4Net.Messages.Serialization.Common.AttPosMocapMessageSerializer();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.SetActuatorControlTarget))
            {
                return new MavLink4Net.Messages.Serialization.Common.SetActuatorControlTargetMessageSerializer();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.ActuatorControlTarget))
            {
                return new MavLink4Net.Messages.Serialization.Common.ActuatorControlTargetMessageSerializer();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.Altitude))
            {
                return new MavLink4Net.Messages.Serialization.Common.AltitudeMessageSerializer();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.ResourceRequest))
            {
                return new MavLink4Net.Messages.Serialization.Common.ResourceRequestMessageSerializer();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.ScaledPressure3))
            {
                return new MavLink4Net.Messages.Serialization.Common.ScaledPressure3MessageSerializer();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.FollowTarget))
            {
                return new MavLink4Net.Messages.Serialization.Common.FollowTargetMessageSerializer();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.ControlSystemState))
            {
                return new MavLink4Net.Messages.Serialization.Common.ControlSystemStateMessageSerializer();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.BatteryStatus))
            {
                return new MavLink4Net.Messages.Serialization.Common.BatteryStatusMessageSerializer();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.AutopilotVersion))
            {
                return new MavLink4Net.Messages.Serialization.Common.AutopilotVersionMessageSerializer();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.LandingTarget))
            {
                return new MavLink4Net.Messages.Serialization.Common.LandingTargetMessageSerializer();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.EstimatorStatus))
            {
                return new MavLink4Net.Messages.Serialization.Common.EstimatorStatusMessageSerializer();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.WindCov))
            {
                return new MavLink4Net.Messages.Serialization.Common.WindCovMessageSerializer();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.GpsInput))
            {
                return new MavLink4Net.Messages.Serialization.Common.GpsInputMessageSerializer();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.GpsRtcmData))
            {
                return new MavLink4Net.Messages.Serialization.Common.GpsRtcmDataMessageSerializer();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.HighLatency))
            {
                return new MavLink4Net.Messages.Serialization.Common.HighLatencyMessageSerializer();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.HighLatency2))
            {
                return new MavLink4Net.Messages.Serialization.Common.HighLatency2MessageSerializer();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.Vibration))
            {
                return new MavLink4Net.Messages.Serialization.Common.VibrationMessageSerializer();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.HomePosition))
            {
                return new MavLink4Net.Messages.Serialization.Common.HomePositionMessageSerializer();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.SetHomePosition))
            {
                return new MavLink4Net.Messages.Serialization.Common.SetHomePositionMessageSerializer();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.MessageInterval))
            {
                return new MavLink4Net.Messages.Serialization.Common.MessageIntervalMessageSerializer();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.ExtendedSysState))
            {
                return new MavLink4Net.Messages.Serialization.Common.ExtendedSysStateMessageSerializer();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.AdsbVehicle))
            {
                return new MavLink4Net.Messages.Serialization.Common.AdsbVehicleMessageSerializer();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.Collision))
            {
                return new MavLink4Net.Messages.Serialization.Common.CollisionMessageSerializer();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.V2Extension))
            {
                return new MavLink4Net.Messages.Serialization.Common.V2ExtensionMessageSerializer();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.MemoryVect))
            {
                return new MavLink4Net.Messages.Serialization.Common.MemoryVectMessageSerializer();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.DebugVect))
            {
                return new MavLink4Net.Messages.Serialization.Common.DebugVectMessageSerializer();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.NamedValueFloat))
            {
                return new MavLink4Net.Messages.Serialization.Common.NamedValueFloatMessageSerializer();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.NamedValueInt))
            {
                return new MavLink4Net.Messages.Serialization.Common.NamedValueIntMessageSerializer();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.Statustext))
            {
                return new MavLink4Net.Messages.Serialization.Common.StatustextMessageSerializer();
            }
            if ((mavType == MavLink4Net.Messages.MavMessageType.Debug))
            {
                return new MavLink4Net.Messages.Serialization.Common.DebugMessageSerializer();
            }
            return null;
        }
    }
}
