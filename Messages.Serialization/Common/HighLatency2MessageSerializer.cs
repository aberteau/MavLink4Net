//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.42000
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------


namespace MavLink4Net.Messages.Serialization.Common
{
    
    
    public class HighLatency2MessageSerializer : MavLink4Net.Messages.Serialization.IMessageSerializer
    {
        
        public void Serialize(System.IO.BinaryWriter writer, MavLink4Net.Messages.IMessage message)
        {
            MavLink4Net.Messages.Common.HighLatency2Message tMessage = message as MavLink4Net.Messages.Common.HighLatency2Message;
            writer.Write(tMessage.Timestamp);
            writer.Write(tMessage.Latitude);
            writer.Write(tMessage.Longitude);
            writer.Write(tMessage.CustomMode);
            writer.Write(tMessage.Altitude);
            writer.Write(tMessage.TargetAltitude);
            writer.Write(tMessage.TargetDistance);
            writer.Write(tMessage.WpNum);
            writer.Write(((ushort)(tMessage.FailureFlags)));
            writer.Write(((byte)(tMessage.Type)));
            writer.Write(((byte)(tMessage.Autopilot)));
            writer.Write(tMessage.Heading);
            writer.Write(tMessage.TargetHeading);
            writer.Write(tMessage.Throttle);
            writer.Write(tMessage.Airspeed);
            writer.Write(tMessage.AirspeedSp);
            writer.Write(tMessage.Groundspeed);
            writer.Write(tMessage.Windspeed);
            writer.Write(tMessage.WindHeading);
            writer.Write(tMessage.Eph);
            writer.Write(tMessage.Epv);
            writer.Write(tMessage.TemperatureAir);
            writer.Write(tMessage.ClimbRate);
            writer.Write(tMessage.Battery);
            writer.Write(tMessage.Custom0);
            writer.Write(tMessage.Custom1);
            writer.Write(tMessage.Custom2);
        }
        
        public MavLink4Net.Messages.IMessage Deserialize(System.IO.BinaryReader reader)
        {
            MavLink4Net.Messages.Common.HighLatency2Message message = new MavLink4Net.Messages.Common.HighLatency2Message();
            message.Timestamp = reader.ReadUInt32();
            message.Latitude = reader.ReadInt32();
            message.Longitude = reader.ReadInt32();
            message.CustomMode = reader.ReadUInt16();
            message.Altitude = reader.ReadInt16();
            message.TargetAltitude = reader.ReadInt16();
            message.TargetDistance = reader.ReadUInt16();
            message.WpNum = reader.ReadUInt16();
            message.FailureFlags = ((MavLink4Net.Messages.Common.HlFailureFlag)(reader.ReadUInt16()));
            message.Type = ((MavLink4Net.Messages.Common.Type)(reader.ReadByte()));
            message.Autopilot = ((MavLink4Net.Messages.Common.Autopilot)(reader.ReadByte()));
            message.Heading = reader.ReadByte();
            message.TargetHeading = reader.ReadByte();
            message.Throttle = reader.ReadByte();
            message.Airspeed = reader.ReadByte();
            message.AirspeedSp = reader.ReadByte();
            message.Groundspeed = reader.ReadByte();
            message.Windspeed = reader.ReadByte();
            message.WindHeading = reader.ReadByte();
            message.Eph = reader.ReadByte();
            message.Epv = reader.ReadByte();
            message.TemperatureAir = reader.ReadSByte();
            message.ClimbRate = reader.ReadSByte();
            message.Battery = reader.ReadSByte();
            message.Custom0 = reader.ReadSByte();
            message.Custom1 = reader.ReadSByte();
            message.Custom2 = reader.ReadSByte();
            return message;
        }
    }
}
